{"version":3,"file":"mfe-auth.mjs","sources":["../../../projects/mfe-auth/src/lib/components/login/login.component.ts","../../../projects/mfe-auth/src/lib/components/login/login.component.html","../../../projects/mfe-auth/src/lib/components/register/register.component.ts","../../../projects/mfe-auth/src/lib/components/register/register.component.html","../../../projects/mfe-auth/src/lib/components/user-profile/user-profile.component.ts","../../../projects/mfe-auth/src/lib/components/user-profile/user-profile.component.html","../../../projects/mfe-auth/src/lib/auth.module.ts","../../../projects/mfe-auth/src/public-api.ts","../../../projects/mfe-auth/src/mfe-auth.ts"],"sourcesContent":["import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { FormControl, FormGroup, FormGroupDirective, NgForm, Validators, FormBuilder } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from 'shared-lib';\r\nimport { UserService } from 'shared-lib';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  standalone: false\r\n})\r\n\r\nexport class LoginComponent {\r\n  loading: boolean = false;\r\n  loginForm: FormGroup;\r\n\r\n  constructor(\r\n    private readonly fb: FormBuilder,\r\n    private readonly userService: UserService,\r\n    private readonly router: Router,\r\n    private readonly authService: AuthService\r\n  ) {\r\n    this.loginForm = this.fb.group({\r\n      email: this.fb.control('', [\r\n        Validators.required,\r\n        Validators.email\r\n      ]),\r\n      passwordHash: this.fb.control('', [\r\n        Validators.required,\r\n        Validators.minLength(8),\r\n        Validators.maxLength(30)\r\n      ])\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.loginForm.invalid) {\r\n      this.loginForm.markAllAsTouched();\r\n      return;\r\n    }\r\n    this.userService.login(this.loginForm.value).subscribe({\r\n      next: (res) => {\r\n        this.authService.authenticate(res.token);\r\n        this.router.navigate(['/Dashboard']);\r\n      }\r\n    });\r\n  }\r\n\r\n  getEmailError(): string | null {\r\n    const control = this.loginForm.get('email');\r\n    if (control?.hasError('required')) return 'Email é obrigatório';\r\n    if (control?.hasError('email')) return 'Email inválido';\r\n    return null;\r\n  }\r\n\r\n  getPasswordError(): string | null {\r\n    const control = this.loginForm.get('passwordHash');\r\n    if (control?.hasError('required')) return 'A senha é obrigatória';\r\n    if (control?.hasError('minlength')) return 'Mínimo de 8 caracteres';\r\n    if (control?.hasError('maxlength')) return 'Máximo de 30 caracteres';\r\n    return null;\r\n  }\r\n  \r\n  onGoogleLogin() {\r\n    this.authService.getFirebaseToken().then(token => {\r\n      if (token) {\r\n        this.userService.loginGoogle(token).subscribe((res) => {\r\n          this.authService.authenticate(res.token);\r\n          this.router.navigate(['/Dashboard']);\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n\r\n","<div class=\"gradient-line\"></div>\r\n<div class=\"login-container\">\r\n    <div class=\"login-card\">\r\n        <div class=\"login-header\">\r\n            <h1>Welcome Back</h1>\r\n            <p class=\"subtitle\">Sign in to your WiseTraining account</p>\r\n        </div>\r\n        <form (ngSubmit)=\"onSubmit()\" class=\"form\" [formGroup]=\"loginForm\">\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Email</mat-label>\r\n                <input type=\"text\" matInput formControlName=\"email\">\r\n                <mat-icon matSuffix>email</mat-icon>\r\n                <mat-error *ngIf=\"getEmailError()\">{{ getEmailError() }}</mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Password</mat-label>\r\n                <input type=\"password\" matInput formControlName=\"passwordHash\">\r\n                <mat-icon matSuffix>lock</mat-icon>\r\n                <mat-error *ngIf=\"getPasswordError()\">{{ getPasswordError() }}</mat-error>\r\n            </mat-form-field>\r\n            \r\n            <div class=\"form-actions\">\r\n                <button type=\"submit\" mat-flat-button color=\"primary\">Sign In</button>\r\n                <a routerLink=\"/\" class=\"back-link\">Back to Home</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { FormControl, FormGroup, FormGroupDirective, NgForm, Validators, FormBuilder } from '@angular/forms';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { Router } from '@angular/router';\r\nimport { User } from 'shared-lib';\r\nimport { AuthService } from 'shared-lib';\r\nimport { UserService } from 'shared-lib';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss'],\r\n  standalone: false\r\n})\r\n\r\nexport class RegisterComponent {\r\n\r\n  registerForm: FormGroup;\r\n\r\n  constructor(\r\n    private readonly fb: FormBuilder,\r\n    private readonly userService: UserService,\r\n    private readonly router: Router,\r\n    private readonly authService: AuthService\r\n  ) {\r\n    this.registerForm = this.fb.group({\r\n      fullName: this.fb.control('', [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(15),\r\n        /* Validators.pattern(/^\\w+$/) */\r\n      ]),\r\n      passwordHash: this.fb.control('', [\r\n        Validators.required,\r\n        Validators.minLength(8),\r\n        Validators.maxLength(30),\r\n        /* Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/) */\r\n      ]),\r\n      email: this.fb.control('', [\r\n        Validators.required,\r\n        Validators.maxLength(30)\r\n      ])\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.registerForm.invalid) {\r\n      this.registerForm.markAllAsTouched();\r\n      return;\r\n    }\r\n    \r\n    this.userService.register(this.registerForm.value as User, false).subscribe(\r\n      (res) => {\r\n        this.authService.authenticate(res.token);\r\n        this.router.navigate(['/Dashboard']);\r\n      }\r\n    )\r\n  }\r\n\r\n  getUsernameError(): string | null {\r\n    const control = this.registerForm.get('fullName');\r\n    if (control?.hasError('required')) return 'Nome de usuário é obrigatório';\r\n    if (control?.hasError('minlength')) return 'Mínimo 3 caracteres';\r\n    if (control?.hasError('maxlength')) return 'Máximo de 15 caracteres';\r\n    return null;\r\n  }\r\n\r\n  getPasswordError(): string | null {\r\n    const control = this.registerForm.get('passwordHash');\r\n    if (control?.hasError('required')) return 'Senha é obrigatória';\r\n    if (control?.hasError('minlength')) return 'Mínimo 8 caracteres';\r\n    if (control?.hasError('maxlength')) return 'Máximo de 30 caracteres';\r\n    return null;\r\n  }\r\n\r\n  onGoogleLogin() {\r\n    this.authService.getFirebaseToken().then(token => {\r\n      if (token) {\r\n        this.userService.loginGoogle(token).subscribe((res) => {\r\n          this.authService.authenticate(res.token);\r\n          this.router.navigate(['/']);\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n","<div class=\"register\">\r\n    <div class=\"register-container\">\r\n        <div class=\"register-left\">\r\n            <div class=\"register-header\">\r\n                <span class=\"fs-2 fw-medium\">Cadastrar Empresa</span>\r\n                <h3 class=\"fs-6\" style=\"color: rgb(140, 140, 140);\">Preencha suas informações para criar uma conta</h3>\r\n            </div>\r\n            <form class=\"register-form\" (ngSubmit)=\"onSubmit()\" [formGroup]=\"registerForm\">\r\n                <mat-form-field>\r\n                    <mat-label>Nome de usuário</mat-label>\r\n                    <input type=\"text\" matInput formControlName=\"fullName\">\r\n                    <mat-error *ngIf=\"getUsernameError()\">{{ getUsernameError() }}</mat-error>\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <mat-label>Email</mat-label>\r\n                    <input type=\"email\" matInput formControlName=\"email\">\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <mat-label>Senha</mat-label>\r\n                    <input type=\"password\" matInput formControlName=\"passwordHash\" placeholder=\"Ex. pat@example.com\">\r\n                    <mat-error *ngIf=\"getPasswordError()\">{{ getPasswordError() }}</mat-error>\r\n                </mat-form-field>\r\n                <mat-checkbox>Li e concordo com os termos e condições</mat-checkbox>\r\n                <button type=\"submit\" mat-stroked-button style=\"background-color: var(--primary-color); color: white;\">Criar conta</button>\r\n            </form>\r\n        </div>\r\n        <div class=\"register-image\">\r\n            <img src=\"assets/images/register-company.jpg\" alt=\"Register Image\">\r\n\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { User } from 'shared-lib';\r\nimport { UserService } from 'shared-lib';\r\n\r\n@Component({\r\n  selector: 'app-user-profile',\r\n  templateUrl: './user-profile.component.html',\r\n  styleUrls: ['./user-profile.component.scss'],\r\n  standalone: false\r\n})\r\nexport class UserProfileComponent implements OnInit {\r\n  profileForm!: FormGroup;\r\n  user: User | null = null;\r\n  isLoading = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private userService: UserService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    this.loadUserProfile();\r\n  }\r\n\r\n  initForm(): void {\r\n    this.profileForm = this.fb.group({\r\n      id: [0],\r\n      email: [{ value: '', disabled: true }],\r\n      fullName: ['', [Validators.required, Validators.maxLength(100)]],\r\n      passwordHash: ['']\r\n    });\r\n  }\r\n\r\n  loadUserProfile(): void {\r\n    this.isLoading = true;\r\n    this.userService.getAuthenticatedUser().subscribe({\r\n      next: (user) => {\r\n        this.user = user;\r\n        this.profileForm.patchValue({\r\n          id: user.id,\r\n          email: user.email,\r\n          fullName: user.fullName\r\n        });\r\n        this.isLoading = false;\r\n      },\r\n      error: (error) => {\r\n        this.snackBar.open('Error loading profile: ' + error.message, 'Close', {\r\n          duration: 3000\r\n        });\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.profileForm.valid) {\r\n      this.isLoading = true;\r\n      const userData: User = {\r\n        ...this.profileForm.getRawValue(),\r\n        email: this.profileForm.get('email')?.value\r\n      };\r\n\r\n      this.userService.put(userData).subscribe({\r\n        next: () => {\r\n          this.snackBar.open('Profile updated successfully!', 'Close', {\r\n            duration: 3000\r\n          });\r\n          this.isLoading = false;\r\n        },\r\n        error: (error) => {\r\n          this.snackBar.open('Error updating profile: ' + error.message, 'Close', {\r\n            duration: 3000\r\n          });\r\n          this.isLoading = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n","<div class=\"container\">\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>My Profile</mat-card-title>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n      <form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\">\r\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\r\n          <mat-label>Email</mat-label>\r\n          <input matInput formControlName=\"email\" type=\"email\" readonly>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\r\n          <mat-label>Full Name</mat-label>\r\n          <input matInput formControlName=\"fullName\" type=\"text\">\r\n          <mat-error *ngIf=\"profileForm.get('fullName')?.hasError('required')\">\r\n            Full Name is required\r\n          </mat-error>\r\n          <mat-error *ngIf=\"profileForm.get('fullName')?.hasError('maxlength')\">\r\n            Full Name must not exceed 100 characters\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <div class=\"button-row\">\r\n          <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!profileForm.valid || isLoading\">\r\n            <mat-icon>save</mat-icon>\r\n            Update Profile\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n// Angular Material\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\n\r\n// Components\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { UserProfileComponent } from './components/user-profile/user-profile.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'register', component: RegisterComponent },\r\n  { path: 'profile', component: UserProfileComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    UserProfileComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(routes),\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatTabsModule,\r\n    MatCheckboxModule\r\n  ]\r\n})\r\nexport class AuthModule { }\r\n","/*\r\n * Public API Surface of mfe-auth\r\n */\r\n\r\nexport * from './lib/auth.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i8","i3","i6","i7","i9"],"mappings":"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"}