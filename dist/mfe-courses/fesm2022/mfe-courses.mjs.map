{"version":3,"file":"mfe-courses.mjs","sources":["../../../projects/mfe-courses/src/lib/components/courses-list/courses-list.component.ts","../../../projects/mfe-courses/src/lib/components/courses-list/courses-list.component.html","../../../projects/mfe-courses/src/lib/components/course-create/course-create.component.ts","../../../projects/mfe-courses/src/lib/components/course-create/course-create.component.html","../../../projects/mfe-courses/src/lib/components/course-detail/course-detail.component.ts","../../../projects/mfe-courses/src/lib/components/course-detail/course-detail.component.html","../../../projects/mfe-courses/src/lib/components/course-catalog/course-catalog.component.ts","../../../projects/mfe-courses/src/lib/components/course-catalog/course-catalog.component.html","../../../projects/mfe-courses/src/lib/components/shared/confirm-dialog/confirm-dialog.component.ts","../../../projects/mfe-courses/src/lib/components/shared/confirm-dialog/confirm-dialog.component.html","../../../projects/mfe-courses/src/lib/components/course-details/course-details.component.ts","../../../projects/mfe-courses/src/lib/components/course-details/course-details.component.html","../../../projects/mfe-courses/src/lib/courses.module.ts","../../../projects/mfe-courses/src/public-api.ts","../../../projects/mfe-courses/src/mfe-courses.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Course } from 'shared-lib';\r\nimport { CourseService } from 'shared-lib';\r\nimport { MediaService } from 'shared-lib';\r\nimport { Media } from 'shared-lib';\r\nimport { forkJoin, of } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-courses-list',\r\n  standalone: false,\r\n  templateUrl: './courses-list.component.html',\r\n  styleUrls: ['./courses-list.component.scss', '../course-create/file-upload.scss']\r\n})\r\nexport class CoursesListComponent implements OnInit {\r\n  displayedColumns: string[] = ['title', 'status', 'enrollments', 'actions'];\r\n  courses: Course[] = [];\r\n  isLoading = false;\r\n\r\n  constructor(\r\n    private courseService: CourseService,\r\n    private mediaService: MediaService,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadCourses();\r\n  }\r\n\r\n  loadCourses(): void {\r\n    this.isLoading = true;\r\n    this.courseService.getAll()\r\n      .pipe(\r\n        switchMap(courses => {\r\n          const mediaRequests = courses\r\n            .filter(course => course.mediaId)\r\n            .map(course => \r\n              this.mediaService.getById(course.mediaId!)\r\n                .pipe(\r\n                  catchError(() => of(null)),\r\n                  switchMap(media => {\r\n                    if (media) {\r\n                      const courseIndex = courses.findIndex(c => c.id === course.id);\r\n                      if (courseIndex >= 0) {\r\n                        courses[courseIndex].media = media;\r\n                      }\r\n                    }\r\n                    return of(null);\r\n                  })\r\n                )\r\n            );\r\n            \r\n          if (mediaRequests.length > 0) {\r\n            return forkJoin(mediaRequests).pipe(switchMap(() => of(courses)));\r\n          }\r\n          \r\n          return of(courses);\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: (data) => {\r\n          this.courses = data;\r\n          this.isLoading = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading courses:', error);\r\n          this.snackBar.open('Error loading courses', 'Close', { duration: 3000 });\r\n          this.isLoading = false;\r\n        }\r\n      });\r\n  }\r\n  \r\n  getMediaUrl(course: Course): string {\r\n    return course.media ? this.mediaService.getFullUrl(course.media.url) : '';\r\n  }\r\n\r\n  async createDefaultCourse(): Promise<void> {\r\n    try {\r\n      this.isLoading = true;\r\n      \r\n      // Create default media\r\n      const defaultMedia: Media = {\r\n        id: 0,\r\n        url: 'https://placehold.co/600x400?text=Default+Course+Image',\r\n        type: 'image'\r\n      };\r\n      \r\n      const createdMedia = await this.mediaService.post(defaultMedia).toPromise();\r\n      \r\n      if (!createdMedia) {\r\n        throw new Error('Failed to create default media');\r\n      }\r\n      \r\n      // Create default course\r\n      const defaultCourse: Course = {\r\n        id: 0,\r\n        title: 'New Course',\r\n        description: 'Course description',\r\n        categoryId: 1, // Default category ID\r\n        duration: 60,\r\n        price: 0,\r\n        language: 'Portuguese',\r\n        isPublished: false,\r\n        companyId: 1, // TODO: Get from authenticated user\r\n        mediaId: createdMedia.id!\r\n      };\r\n      \r\n      const createdCourse = await this.courseService.post(defaultCourse).toPromise();\r\n      \r\n      if (!createdCourse) {\r\n        throw new Error('Failed to create default course');\r\n      }\r\n      \r\n      // Navigate to edit the created course\r\n      this.router.navigate(['/Courses/Edit', createdCourse.id]);\r\n      \r\n    } catch (error: any) {\r\n      console.error('Error creating default course:', error);\r\n      this.snackBar.open('Error creating default course: ' + (error.message || 'Unknown error'), 'Close', { \r\n        duration: 5000 \r\n      });\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n}\r\n\r\n","<mat-card class=\"courses-list-card\">\r\n  <mat-card-header>\r\n    <div class=\"header-content\">\r\n      <div>\r\n        <mat-card-title>Courses</mat-card-title>\r\n        <mat-card-subtitle>Manage your courses and view their status.</mat-card-subtitle>\r\n      </div>\r\n      <div class=\"header-actions\">\r\n        <button mat-stroked-button>Export</button>\r\n        <button mat-flat-button color=\"primary\" (click)=\"createDefaultCourse()\" [disabled]=\"isLoading\">\r\n          <mat-icon>add_circle</mat-icon>\r\n          Create Course\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </mat-card-header>\r\n  \r\n  <mat-card-content>\r\n    <table mat-table [dataSource]=\"courses\" class=\"courses-table\">\r\n\r\n      <ng-container matColumnDef=\"title\">\r\n        <th mat-header-cell *matHeaderCellDef>Course Title</th>\r\n        <td mat-cell *matCellDef=\"let course\">\r\n          <div class=\"course-title-with-image\">\r\n            <img *ngIf=\"course.media\" [src]=\"getMediaUrl(course)\" alt=\"Course Image\" class=\"course-thumbnail\">\r\n            <span>{{course.title}}</span>\r\n          </div>\r\n        </td>\r\n      </ng-container>\r\n      \r\n      <ng-container matColumnDef=\"status\">\r\n        <th mat-header-cell *matHeaderCellDef>Status</th>\r\n        <td mat-cell *matCellDef=\"let course\">\r\n          <span class=\"status-badge\" [ngClass]=\"{\r\n            'published': course.isPublished,\r\n            'draft': !course.isPublished\r\n          }\">\r\n            {{course.isPublished ? 'Published' : 'Draft'}}\r\n          </span>\r\n        </td>\r\n      </ng-container>\r\n      \r\n      <ng-container matColumnDef=\"enrollments\">\r\n        <th mat-header-cell *matHeaderCellDef>Enrollments</th>\r\n        <td mat-cell *matCellDef=\"let course\">{{course.totalEnrollments}}</td>\r\n      </ng-container>\r\n      \r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef>\r\n          <span class=\"visually-hidden\">Actions</span>\r\n        </th>\r\n        <td mat-cell *matCellDef=\"let course\">\r\n          <button mat-icon-button [matMenuTriggerFor]=\"actionsMenu\">\r\n            <mat-icon>more_horiz</mat-icon>\r\n          </button>\r\n          <mat-menu #actionsMenu=\"matMenu\">\r\n            <button mat-menu-item [routerLink]=\"['/Courses/Edit', course.id]\">Edit</button>\r\n            <button mat-menu-item>View Enrollments</button>\r\n            <button mat-menu-item>Preview</button>\r\n            <button mat-menu-item class=\"danger\">Delete</button>\r\n          </mat-menu>\r\n        </td>\r\n      </ng-container>\r\n      \r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n    </table>\r\n  </mat-card-content>\r\n</mat-card>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormArray, Validators, AbstractControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Category } from 'shared-lib';\r\nimport { Tag } from 'shared-lib';\r\nimport { Course } from 'shared-lib';\r\nimport { CourseService } from 'shared-lib';\r\nimport { CategoryService } from 'shared-lib';\r\nimport { TagService } from 'shared-lib';\r\nimport { MediaService } from 'shared-lib';\r\nimport { CourseContentService } from 'shared-lib';\r\nimport { Media } from 'shared-lib';\r\nimport { CourseContent } from 'shared-lib';\r\nimport { forkJoin, of } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-course-create',\r\n  templateUrl: './course-create.component.html',\r\n  standalone: false,\r\n  styleUrls: ['./course-create.component.scss', './file-upload.scss']\r\n})\r\nexport class CourseCreateComponent implements OnInit {\r\n  courseForm!: FormGroup;\r\n  categories: Category[] = [];\r\n  tags: Tag[] = [];\r\n  isLoading = false;\r\n  isEditMode = false;\r\n  courseId?: number;\r\n  existingCourse?: Course;\r\n  existingMedia?: Media;\r\n  existingContents: CourseContent[] = [];\r\n  uploadedFile: File | null = null;\r\n  previewUrl: string | null = null;\r\n  courseMediaFile: File | null = null;\r\n  contentMediaFiles: Map<number, File> = new Map<number, File>();\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private courseService: CourseService,\r\n    private categoryService: CategoryService,\r\n    private tagService: TagService,\r\n    private mediaService: MediaService,\r\n    private courseContentService: CourseContentService,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n    private route: ActivatedRoute\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    this.loadCategories();\r\n    this.loadTags();\r\n    \r\n    // Check if we're in edit mode by looking for courseId param\r\n    this.route.params.subscribe(params => {\r\n      if (params['courseId']) {\r\n        this.isEditMode = true;\r\n        this.courseId = +params['courseId'];\r\n        this.loadCourseData(this.courseId);\r\n      }\r\n    });\r\n  }\r\n  \r\n  initForm(): void {\r\n    this.courseForm = this.fb.group({\r\n      title: ['', [Validators.required, Validators.maxLength(100)]],\r\n      description: ['', Validators.required],\r\n      categoryId: [null, Validators.required],\r\n      tagIds: [[]],\r\n      duration: [0, [Validators.required, Validators.min(1)]],\r\n      price: [0, [Validators.required, Validators.min(0)]],\r\n      language: ['', Validators.maxLength(50)],\r\n      isPublished: [false],\r\n      companyId: [1], // TODO: Get from authenticated user's company\r\n      media: this.fb.group({\r\n        url: ['', Validators.required],\r\n        type: ['', Validators.required]\r\n      }),\r\n      contents: this.fb.array([])\r\n    });\r\n  }\r\n  \r\n  loadCourseData(courseId: number): void {\r\n    this.isLoading = true;\r\n    \r\n    // Get course details\r\n    this.courseService.getById(courseId)\r\n      .pipe(\r\n        switchMap(course => {\r\n          this.existingCourse = course;\r\n          \r\n          // Get media details if exists\r\n          const mediaRequest = course.mediaId ? \r\n            this.mediaService.getById(course.mediaId).pipe(\r\n              catchError(error => {\r\n                console.error('Error loading media:', error);\r\n                return of(null);\r\n              })\r\n            ) : of(null);\r\n          \r\n          // Get course contents\r\n          const contentsRequest = this.courseContentService.getAll().pipe(\r\n            catchError(error => {\r\n              console.error('Error loading course contents:', error);\r\n              return of([]);\r\n            }),\r\n            // Filter contents for this course\r\n            switchMap(allContents => {\r\n              const courseContents = allContents.filter(\r\n                content => content.courseId === courseId\r\n              );\r\n              \r\n              // If we have contents with media, load their media too\r\n              if (courseContents.length > 0) {\r\n                const mediaRequests = courseContents\r\n                  .filter(content => content.mediaId)\r\n                  .map(content => this.mediaService.getById(content.mediaId!)\r\n                    .pipe(\r\n                      catchError(() => of(null)),\r\n                      switchMap(media => {\r\n                        if (media) {\r\n                          // Assign media to content\r\n                          const contentWithIndex = courseContents.findIndex(c => c.id === content.id);\r\n                          if (contentWithIndex >= 0) {\r\n                            courseContents[contentWithIndex].media = media;\r\n                          }\r\n                        }\r\n                        return of(null);\r\n                      })\r\n                    )\r\n                  );\r\n                \r\n                if (mediaRequests.length > 0) {\r\n                  return forkJoin(mediaRequests).pipe(\r\n                    switchMap(() => of(courseContents))\r\n                  );\r\n                }\r\n              }\r\n              \r\n              return of(courseContents);\r\n            })\r\n          );\r\n          \r\n          return forkJoin({\r\n            media: mediaRequest,\r\n            contents: contentsRequest\r\n          });\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: ({ media, contents }) => {\r\n          this.existingMedia = media ?? undefined;\r\n          this.existingContents = contents;\r\n          this.populateForm();\r\n          this.isLoading = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading course data:', error);\r\n          this.snackBar.open('Error loading course data', 'Close', { duration: 3000 });\r\n          this.isLoading = false;\r\n        }\r\n      });\r\n  }\r\n  \r\n  populateForm(): void {\r\n    if (!this.existingCourse) return;\r\n    \r\n    // Populate main form\r\n    this.courseForm.patchValue({\r\n      title: this.existingCourse.title,\r\n      description: this.existingCourse.description,\r\n      categoryId: this.existingCourse.categoryId,\r\n      duration: this.existingCourse.duration,\r\n      price: this.existingCourse.price,\r\n      language: this.existingCourse.language,\r\n      isPublished: this.existingCourse.isPublished,\r\n      companyId: this.existingCourse.companyId\r\n    });\r\n    \r\n    // Set tag IDs if available\r\n    if (this.existingCourse.tags && this.existingCourse.tags.length > 0) {\r\n      const tagIds = this.existingCourse.tags.map(tag => tag.id!);\r\n      this.courseForm.get('tagIds')?.setValue(tagIds);\r\n    }\r\n    \r\n    // Set media if available\r\n    if (this.existingMedia) {\r\n      this.courseForm.get('media')?.patchValue({\r\n        url: this.existingMedia.url,\r\n        type: this.existingMedia.type\r\n      });\r\n      \r\n      // Set preview URL if it's an image or video\r\n      if (this.existingMedia?.url) {\r\n        // Use the full URL with API base path\r\n        this.previewUrl = this.mediaService.getFullUrl(this.existingMedia.url);\r\n        // Simulate file type for display\r\n        this.uploadedFile = new File([], 'existing-media', { \r\n          type: this.existingMedia.type === 'image' ? 'image/jpeg' : \r\n                this.existingMedia.type === 'video' ? 'video/mp4' : 'application/octet-stream'\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Add course contents if available\r\n    if (this.existingContents && this.existingContents.length > 0) {\r\n      this.contents.clear(); // Clear default empty content\r\n      \r\n      // Sort by order\r\n      const sortedContents = [...this.existingContents].sort((a, b) => a.order - b.order);\r\n      \r\n      for (const content of sortedContents) {\r\n        const contentGroup = this.fb.group({\r\n          id: [content.id],\r\n          order: [content.order, Validators.required],\r\n          title: [content.title, Validators.required],\r\n          textContent: [content.textContent],\r\n          duration: [content.duration, [Validators.required, Validators.min(1)]],\r\n          mediaId: [content.mediaId],\r\n          media: this.fb.group({\r\n            url: [content.media?.url || ''],\r\n            type: [content.media?.type || '']\r\n          })\r\n        });\r\n        \r\n        // If content has media, set the preview for the content\r\n        if (content.media) {\r\n          // Store the content media for reference\r\n          this.contentMediaFiles.set(this.contents.length, new File([], 'existing-media', {\r\n            type: content.media.type === 'image' ? 'image/jpeg' : \r\n                  content.media.type === 'video' ? 'video/mp4' : 'application/octet-stream'\r\n          }));\r\n        }\r\n        \r\n        this.contents.push(contentGroup);\r\n      }\r\n    }\r\n  }\r\n\r\n  loadCategories(): void {\r\n    this.categoryService.getAll().subscribe({\r\n      next: (categories) => {\r\n        this.categories = categories;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading categories:', error);\r\n        this.snackBar.open('Error loading categories', 'Close', { duration: 3000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  loadTags(): void {\r\n    this.tagService.getAll().subscribe({\r\n      next: (tags) => {\r\n        this.tags = tags;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading tags:', error);\r\n        this.snackBar.open('Error loading tags', 'Close', { duration: 3000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  get contents(): FormArray {\r\n    return this.courseForm.get('contents') as FormArray;\r\n  }\r\n\r\n  get media(): FormGroup {\r\n    return this.courseForm.get('media') as FormGroup;\r\n  }\r\n\r\n  getMediaGroup(content: AbstractControl): FormGroup {\r\n    return content.get('media') as FormGroup;\r\n  }\r\n\r\n  addContent() {\r\n    this.contents.push(\r\n      this.fb.group({\r\n        order: [this.contents.length + 1, Validators.required],\r\n        title: ['', Validators.required],\r\n        textContent: [''],\r\n        duration: [0, [Validators.required, Validators.min(1)]],\r\n        media: this.fb.group({\r\n          url: [''],\r\n          type: ['']\r\n        })\r\n      })\r\n    );\r\n  }\r\n\r\n  removeContent(index: number) {\r\n    this.contents.removeAt(index);\r\n  }\r\n\r\n  async onSaveCourse() {\r\n    if (!this.courseForm.valid) {\r\n      this.courseForm.markAllAsTouched();\r\n      this.snackBar.open('Please fill all required fields', 'Close', { duration: 3000 });\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n\r\n    try {\r\n      // Prepare form values\r\n      const formValue = this.courseForm.value;\r\n      \r\n      // Upload course media file if exists\r\n      let courseMedia: Media;\r\n      if (this.courseMediaFile) {\r\n        try {\r\n          const uploadedMedia = await this.mediaService.uploadFile(this.courseMediaFile).toPromise();\r\n          if (!uploadedMedia) {\r\n            throw new Error('Failed to upload course media: Response is empty');\r\n          }\r\n          courseMedia = uploadedMedia;\r\n        } catch (error) {\r\n          console.error('Error uploading course media:', error);\r\n          throw new Error('Failed to upload course media');\r\n        }\r\n      } else {\r\n        // Use existing media or create empty one\r\n        courseMedia = {\r\n          id: this.isEditMode && this.existingMedia ? this.existingMedia.id : 0,\r\n          url: this.courseForm.get('media.url')?.value || '',\r\n          type: this.courseForm.get('media.type')?.value || ''\r\n        };\r\n      }\r\n      \r\n      // Prepare course data\r\n      const courseData: Course = {\r\n        id: this.isEditMode && this.courseId ? this.courseId : 0,\r\n        title: formValue.title,\r\n        description: formValue.description,\r\n        categoryId: formValue.categoryId,\r\n        duration: formValue.duration,\r\n        price: formValue.price,\r\n        language: formValue.language,\r\n        isPublished: formValue.isPublished,\r\n        companyId: formValue.companyId,\r\n        mediaId: 0, // Temporary value, will be set by backend\r\n        tags: formValue.tagIds?.length > 0 \r\n          ? formValue.tagIds.map((id: number) => ({ id }))\r\n          : undefined\r\n      };\r\n      \r\n      // Process course contents and their media\r\n      const courseContentsPromises = formValue.contents \r\n        ? formValue.contents.map(async (content: any, index: number) => {\r\n          let contentMedia;\r\n          \r\n          // Upload content media file if exists\r\n          const contentMediaFile = this.contentMediaFiles.get(index);\r\n          if (contentMediaFile) {\r\n            try {\r\n              const uploadedMedia = await this.mediaService.uploadFile(contentMediaFile).toPromise();\r\n              if (!uploadedMedia) {\r\n                throw new Error(`Failed to upload media for content ${index}: Response is empty`);\r\n              }\r\n              contentMedia = uploadedMedia;\r\n            } catch (error) {\r\n              console.error(`Error uploading media for content ${index}:`, error);\r\n              throw new Error(`Failed to upload media for content ${index}`);\r\n            }\r\n          } else if (content.media?.url && content.media?.type) {\r\n            // Use existing media data if no new file but URL exists\r\n            contentMedia = {\r\n              id: content.mediaId || 0,\r\n              url: content.media.url,\r\n              type: content.media.type\r\n            };\r\n          }\r\n          \r\n          // Prepare content data\r\n          return {\r\n            content: {\r\n              id: content.id || 0,\r\n              order: content.order,\r\n              title: content.title,\r\n              textContent: content.textContent,\r\n              duration: content.duration,\r\n              // courseId will be set on backend\r\n            },\r\n            contentMedia\r\n          };\r\n        }) \r\n        : [];\r\n      \r\n      // Wait for all content media uploads to complete\r\n      const courseContents = await Promise.all(courseContentsPromises);\r\n      \r\n      // Determine contents to delete (if in edit mode)\r\n      const contentIdsToDelete: number[] = [];\r\n      if (this.isEditMode && this.existingContents && this.existingContents.length > 0) {\r\n        const currentContentIds = formValue.contents\r\n          ? formValue.contents\r\n              .filter((c: any) => c.id) // Only include contents with IDs (existing contents)\r\n              .map((c: any) => c.id)\r\n          : [];\r\n          \r\n        const deletedContentIds = this.existingContents\r\n          .filter(c => c.id && !currentContentIds.includes(c.id))\r\n          .map(c => c.id!);\r\n          \r\n        contentIdsToDelete.push(...deletedContentIds);\r\n      }\r\n      \r\n      // Create the complete course object for saving\r\n      const courseComplete = {\r\n        course: courseData,\r\n        courseMedia: courseMedia,\r\n        contents: courseContents,\r\n        contentIdsToDelete: contentIdsToDelete\r\n      };\r\n      \r\n      // Save the complete course in a single request\r\n      const savedCourse = await this.courseService.saveComplete(courseComplete).toPromise();\r\n      \r\n      if (!savedCourse) {\r\n        throw new Error('Failed to save course');\r\n      }\r\n\r\n      const successMessage = this.isEditMode ? 'Course updated successfully!' : 'Course created successfully!';\r\n      this.snackBar.open(successMessage, 'Close', { duration: 3000 });\r\n      this.router.navigate(['/Courses']);\r\n    } catch (error: any) {\r\n      console.error('Error saving course:', error);\r\n      this.snackBar.open('Error saving course: ' + (error.message || 'Unknown error'), 'Close', { \r\n        duration: 5000 \r\n      });\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  onDiscardCourse() {\r\n    if (confirm('Are you sure you want to discard this course?')) {\r\n      this.router.navigate(['/Courses']);\r\n    }\r\n  }\r\n\r\n  onFileSelected(event: Event, contentIndex?: number) {\r\n    const input = event.target as HTMLInputElement;\r\n    if (input.files && input.files.length > 0) {\r\n      const file = input.files[0];\r\n      \r\n      if (contentIndex !== undefined) {\r\n        // Store for content media\r\n        this.contentMediaFiles.set(contentIndex, file);\r\n        \r\n        // Get the content form group\r\n        const contentFormGroup = this.contents.at(contentIndex);\r\n        if (contentFormGroup) {\r\n          const contentMediaGroup = this.getMediaGroup(contentFormGroup);\r\n          \r\n          const fileType = file.type.startsWith('image')\r\n            ? 'image'\r\n            : file.type.startsWith('video')\r\n              ? 'video'\r\n              : 'other';\r\n          \r\n          contentMediaGroup.patchValue({ type: fileType });\r\n          \r\n          // Create preview for content\r\n          const reader = new FileReader();\r\n          reader.onload = () => {\r\n            const preview = reader.result as string;\r\n            contentMediaGroup.patchValue({ url: preview });\r\n          };\r\n          reader.readAsDataURL(file);\r\n        }\r\n      } else {\r\n        // This is for the main course media\r\n        this.uploadedFile = file;\r\n        this.courseMediaFile = file;\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = () => (this.previewUrl = reader.result as string);\r\n        reader.readAsDataURL(this.uploadedFile);\r\n\r\n        const fileType = this.uploadedFile.type.startsWith('image')\r\n          ? 'image'\r\n          : this.uploadedFile.type.startsWith('video')\r\n            ? 'video'\r\n            : 'other';\r\n        this.media.patchValue({ type: fileType });\r\n      }\r\n    }\r\n  }\r\n\r\n  isImageFile(contentIndex?: number): boolean {\r\n    if (contentIndex !== undefined) {\r\n      const file = this.contentMediaFiles.get(contentIndex);\r\n      return file ? file.type.startsWith('image') : false;\r\n    }\r\n    return this.uploadedFile ? this.uploadedFile.type.startsWith('image') : false;\r\n  }\r\n\r\n  isVideoFile(contentIndex?: number): boolean {\r\n    if (contentIndex !== undefined) {\r\n      const file = this.contentMediaFiles.get(contentIndex);\r\n      return file ? file.type.startsWith('video') : false;\r\n    }\r\n    return this.uploadedFile ? this.uploadedFile.type.startsWith('video') : false;\r\n  }\r\n  \r\n  getMediaUrl(url: string | undefined): string {\r\n    return url ? this.mediaService.getFullUrl(url) : '';\r\n  }\r\n}\r\n\r\n","<div class=\"create-course-container\">\r\n  <div class=\"header\">\r\n    <button mat-icon-button routerLink=\"/Courses\">\r\n      <mat-icon>arrow_back</mat-icon>\r\n    </button>\r\n    <h1 class=\"title\">{{ isEditMode ? 'Edit Course' : 'New Course' }}</h1>\r\n    <div class=\"status-badge\" [ngClass]=\"{'published': courseForm.get('isPublished')?.value}\">\r\n      {{ courseForm.get('isPublished')?.value ? 'Published' : 'Draft' }}\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"actions\">\r\n      <button mat-stroked-button (click)=\"onDiscardCourse()\" [disabled]=\"isLoading\">\r\n        Discard\r\n      </button>\r\n      <button mat-flat-button color=\"primary\" (click)=\"onSaveCourse()\" [disabled]=\"isLoading\">\r\n        <mat-spinner *ngIf=\"isLoading\" diameter=\"20\" style=\"display: inline-block; margin-right: 8px;\"></mat-spinner>\r\n        {{ isLoading ? 'Saving...' : (isEditMode ? 'Update Course' : 'Save Course') }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"content-layout\">\r\n    <!-- COLUNA PRINCIPAL -->\r\n    <div class=\"main-column\">\r\n      <mat-card class=\"card\">\r\n        <mat-card-header>\r\n          <mat-card-title>Course Details</mat-card-title>\r\n          <mat-card-subtitle>Provide the main details for your new course.</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <form [formGroup]=\"courseForm\" class=\"form-layout\">\r\n            <div class=\"form-field\">\r\n              <mat-label>Title</mat-label>\r\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                <input matInput formControlName=\"title\" placeholder=\"e.g. Advanced Project Management\">\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"form-field\">\r\n              <mat-label>Description</mat-label>\r\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                <textarea matInput formControlName=\"description\" rows=\"4\"\r\n                  placeholder=\"A short, engaging summary of what learners will achieve.\"></textarea>\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"form-field\">\r\n              <mat-label>Category</mat-label>\r\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                <mat-select formControlName=\"categoryId\" placeholder=\"Select category\">\r\n                  <mat-option *ngFor=\"let c of categories\" [value]=\"c.id\">{{ c.name }}</mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"form-field\">\r\n              <mat-label>Tags</mat-label>\r\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                <mat-select formControlName=\"tagIds\" multiple placeholder=\"Select tags\">\r\n                  <mat-option *ngFor=\"let t of tags\" [value]=\"t.id\">{{ t.name }}</mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"form-field\">\r\n              <mat-label>Duration (minutes)</mat-label>\r\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                <input matInput type=\"number\" formControlName=\"duration\" min=\"1\" placeholder=\"Course duration\">\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"form-field\">\r\n              <mat-label>Price (R$)</mat-label>\r\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                <input matInput type=\"number\" formControlName=\"price\" min=\"0\" placeholder=\"Course price\">\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"form-field\">\r\n              <mat-label>Language</mat-label>\r\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                <input matInput formControlName=\"language\" placeholder=\"e.g. Português, English\">\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <!-- CONTEÚDOS -->\r\n            <div class=\"form-field\">\r\n              <mat-label>Course Contents</mat-label>\r\n              <div formArrayName=\"contents\">\r\n                <div *ngFor=\"let content of contents.controls; let i = index\" [formGroupName]=\"i\" class=\"content-item\">\r\n                  <mat-card class=\"card\">\r\n                    <div class=\"content-header\">\r\n                      <button mat-icon-button color=\"warn\" (click)=\"removeContent(i)\" type=\"button\"\r\n                        title=\"Remove content\">\r\n                        <mat-icon>delete</mat-icon>\r\n                      </button>\r\n                    </div>\r\n                    <div class=\"form-field\">\r\n                      <mat-label>Order</mat-label>\r\n                      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                        <input matInput type=\"number\" formControlName=\"order\" min=\"1\">\r\n                      </mat-form-field>\r\n                    </div>\r\n\r\n                    <div class=\"form-field\">\r\n                      <mat-label>Title</mat-label>\r\n                      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                        <input matInput formControlName=\"title\" placeholder=\"Content title\">\r\n                      </mat-form-field>\r\n                    </div>\r\n\r\n                    <div class=\"form-field\">\r\n                      <mat-label>Text Content</mat-label>\r\n                      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                        <textarea matInput formControlName=\"textContent\" rows=\"3\"></textarea>\r\n                      </mat-form-field>\r\n                    </div>\r\n\r\n                    <div class=\"form-field\">\r\n                      <mat-label>Duration (minutes)</mat-label>\r\n                      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                        <input matInput type=\"number\" formControlName=\"duration\" min=\"1\">\r\n                      </mat-form-field>\r\n                    </div>\r\n\r\n                    <div class=\"form-field\">\r\n                      <mat-card class=\"card\">\r\n                        <mat-card-header>\r\n                          <mat-card-title>Content Media</mat-card-title>\r\n                          <mat-card-subtitle>Upload or select an image or video for this content.</mat-card-subtitle>\r\n                        </mat-card-header>\r\n                        <mat-card-content>\r\n                          <div class=\"upload-container\" (click)=\"contentFileInput.click()\">\r\n                            <ng-container *ngIf=\"!getMediaGroup(content).get('url')?.value; else contentPreview\">\r\n                              <mat-icon>cloud_upload</mat-icon>\r\n                              <span>Click to upload a file</span>\r\n                            </ng-container>\r\n\r\n                            <ng-template #contentPreview>\r\n                              <div class=\"preview\">\r\n                                <img *ngIf=\"getMediaGroup(content).get('type')?.value === 'image'\" \r\n                                    [src]=\"getMediaUrl(getMediaGroup(content).get('url')?.value)\" alt=\"Preview\" class=\"preview-image\" />\r\n                                <video *ngIf=\"getMediaGroup(content).get('type')?.value === 'video'\" \r\n                                    [src]=\"getMediaUrl(getMediaGroup(content).get('url')?.value)\" controls></video>\r\n                                <p *ngIf=\"getMediaGroup(content).get('type')?.value !== 'image' && getMediaGroup(content).get('type')?.value !== 'video'\">\r\n                                  Document File\r\n                                </p>\r\n                              </div>\r\n                            </ng-template>\r\n                          </div>\r\n\r\n                          <input #contentFileInput type=\"file\" (change)=\"onFileSelected($event, i)\" hidden\r\n                            accept=\"image/*,video/*,application/pdf\" />\r\n\r\n                          <div [formGroup]=\"media\" class=\"form-field\" *ngIf=\"uploadedFile\">\r\n                            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                              <input matInput formControlName=\"type\" placeholder=\"File type (e.g. image, video)\" />\r\n                            </mat-form-field>\r\n                          </div>\r\n                        </mat-card-content>\r\n                      </mat-card>\r\n                    </div>\r\n                  </mat-card>\r\n                </div>\r\n                <button mat-stroked-button color=\"primary\" (click)=\"addContent()\" type=\"button\">\r\n                  Add Content\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n\r\n    <!-- SIDEBAR -->\r\n    <div class=\"sidebar-column\">\r\n      <mat-card class=\"card\">\r\n        <mat-card-header>\r\n          <mat-card-title>Course Status</mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <div [formGroup]=\"courseForm\">\r\n            <mat-slide-toggle formControlName=\"isPublished\">Published</mat-slide-toggle>\r\n          </div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n\r\n      <mat-card class=\"card\">\r\n        <mat-card-header>\r\n          <mat-card-title>Course Media</mat-card-title>\r\n          <mat-card-subtitle>Upload or select a cover image or video for your course.</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <div class=\"upload-container\" (click)=\"fileInput.click()\">\r\n            <ng-container *ngIf=\"!previewUrl; else preview\">\r\n              <mat-icon>cloud_upload</mat-icon>\r\n              <span>Click to upload a file</span>\r\n            </ng-container>\r\n\r\n            <ng-template #preview>\r\n              <div class=\"preview\">\r\n                <img *ngIf=\"isImageFile()\" [src]=\"previewUrl\" alt=\"Preview\" class=\"preview-image\" />\r\n                <video *ngIf=\"isVideoFile()\" [src]=\"previewUrl\" controls></video>\r\n                <p *ngIf=\"!isImageFile() && !isVideoFile()\">\r\n                  {{ uploadedFile?.name }}\r\n                </p>\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n\r\n          <input #fileInput type=\"file\" (change)=\"onFileSelected($event)\" hidden\r\n            accept=\"image/*,video/*,application/pdf\" />\r\n\r\n          <div [formGroup]=\"media\" class=\"form-field\" *ngIf=\"uploadedFile\">\r\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n              <input matInput formControlName=\"type\" placeholder=\"File type (e.g. image, video)\" />\r\n            </mat-form-field>\r\n          </div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"mobile-actions\">\r\n    <button mat-stroked-button (click)=\"onDiscardCourse()\">Discard</button>\r\n    <button mat-flat-button color=\"primary\" (click)=\"onSaveCourse()\">{{ isEditMode ? 'Update Course' : 'Save Course' }}</button>\r\n  </div>\r\n</div>","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Course } from 'shared-lib';\r\nimport { CourseService } from 'shared-lib';\r\nimport { MediaService } from 'shared-lib';\r\nimport { CourseContent } from 'shared-lib';\r\nimport { forkJoin, of } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-course-detail',\r\n  standalone: false,\r\n  templateUrl: './course-detail.component.html',\r\n  styleUrls: ['./course-detail.component.scss']\r\n})\r\nexport class CourseDetailComponent implements OnInit {\r\n  courseId: number;\r\n  course: Course | null = null;\r\n  courseContents: CourseContent[] = [];\r\n  isLoading = true;\r\n  selectedContent: CourseContent | null = null;\r\n  @ViewChild('videoElement') videoElement: ElementRef<HTMLVideoElement>;\r\n  \r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private courseService: CourseService,\r\n    private mediaService: MediaService,\r\n    private snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe(params => {\r\n      if (params['courseId']) {\r\n        this.courseId = +params['courseId'];\r\n        \r\n        // Check if content ID is specified in the URL query params\r\n        this.route.queryParams.subscribe(queryParams => {\r\n          const contentId = queryParams['contentId'] ? +queryParams['contentId'] : null;\r\n          this.loadCourseData(this.courseId, contentId);\r\n        });\r\n      } else {\r\n        this.snackBar.open('Course ID not provided', 'Close', { duration: 3000 });\r\n        this.router.navigate(['/Courses']);\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadCourseData(courseId: number, contentId: number | null = null): void {\r\n    this.isLoading = true;\r\n    \r\n    this.courseService.getById(courseId)\r\n      .pipe(\r\n        switchMap(course => {\r\n          this.course = course;\r\n          \r\n          // Load media for course if exists\r\n          const courseMediaRequest = course.mediaId ? \r\n            this.mediaService.getById(course.mediaId).pipe(\r\n              catchError(() => of(null))\r\n            ) : of(null);\r\n          \r\n          // Load course contents\r\n          const contentsRequest = this.courseService.getContents(courseId).pipe(\r\n            catchError(() => {\r\n              console.error('Error loading course contents');\r\n              return of([]);\r\n            }),\r\n            switchMap(contents => {\r\n              this.courseContents = (contents as CourseContent[]).sort((a, b) => a.order - b.order);\r\n              \r\n              // If contentId is provided, find that specific content\r\n              if (contentId && this.courseContents.length > 0) {\r\n                const targetContent = this.courseContents.find(c => c.id === contentId);\r\n                if (targetContent) {\r\n                  this.selectedContent = targetContent;\r\n                } else {\r\n                  // Fallback to first content if specified content not found\r\n                  this.selectedContent = this.courseContents[0];\r\n                }\r\n              }\r\n              // Otherwise set first content as selected by default if no content is currently selected\r\n              else if (this.courseContents.length > 0 && !this.selectedContent) {\r\n                this.selectedContent = this.courseContents[0];\r\n              }              // Load media for each content\r\n              const contentMediaRequests = this.courseContents\r\n                .filter(content => content.mediaId)\r\n                .map(content => \r\n                  this.mediaService.getById(content.mediaId!)\r\n                    .pipe(\r\n                      catchError(() => of(null)),\r\n                      switchMap(media => {\r\n                        if (media) {\r\n                          const contentIndex = this.courseContents.findIndex(c => c.id === content.id);\r\n                          if (contentIndex >= 0) {\r\n                            this.courseContents[contentIndex].media = media;\r\n                          }\r\n                        }\r\n                        return of(null);\r\n                      })\r\n                    )\r\n                );\r\n              \r\n              if (contentMediaRequests.length > 0) {\r\n                return forkJoin(contentMediaRequests);\r\n              }\r\n              \r\n              return of(null);\r\n            })\r\n          );\r\n          \r\n          return forkJoin({\r\n            courseMedia: courseMediaRequest,\r\n            contents: contentsRequest\r\n          });\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: ({ courseMedia }) => {\r\n          if (courseMedia && this.course) {\r\n            this.course.media = courseMedia;\r\n          }\r\n          this.isLoading = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading course:', error);\r\n          this.snackBar.open('Error loading course', 'Close', { duration: 3000 });\r\n          this.isLoading = false;\r\n          this.router.navigate(['/Courses']);\r\n        }\r\n      });\r\n  }\r\n\r\n  selectContent(content: CourseContent): void {\r\n    this.selectedContent = content;\r\n    // Scroll to top of content section\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: 'smooth'\r\n    });\r\n    \r\n    // Update URL query param without reloading the page\r\n    this.router.navigate([], {\r\n      relativeTo: this.route,\r\n      queryParams: { contentId: content.id },\r\n      queryParamsHandling: 'merge'\r\n    });\r\n  }\r\n  \r\n  getMediaUrl(url: string | undefined): string {\r\n    return url ? this.mediaService.getFullUrl(url) : '';\r\n  }\r\n  \r\n  // Helper method to check if video is currently playing\r\n  isVideoPlaying(video: HTMLVideoElement): boolean {\r\n    return !!(video.currentTime > 0 && !video.paused && !video.ended && video.readyState > 2);\r\n  }\r\n  \r\n  // Handle play button click\r\n  playVideo(event: Event): void {\r\n    event.stopPropagation();\r\n    if (this.videoElement && this.videoElement.nativeElement) {\r\n      const video = this.videoElement.nativeElement;\r\n      if (this.isVideoPlaying(video)) {\r\n        video.pause();\r\n      } else {\r\n        video.play();\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Navigate to next or previous content\r\n  navigateContent(direction: 'next' | 'prev'): void {\r\n    if (!this.selectedContent || this.courseContents.length === 0) return;\r\n    \r\n    const currentIndex = this.courseContents.findIndex(c => c.id === this.selectedContent?.id);\r\n    if (currentIndex === -1) return;\r\n    \r\n    let targetIndex: number;\r\n    if (direction === 'next') {\r\n      targetIndex = currentIndex + 1 >= this.courseContents.length ? 0 : currentIndex + 1;\r\n    } else {\r\n      targetIndex = currentIndex - 1 < 0 ? this.courseContents.length - 1 : currentIndex - 1;\r\n    }\r\n    \r\n    this.selectContent(this.courseContents[targetIndex]);\r\n    \r\n    // Update URL query param without reloading the page\r\n    this.router.navigate([], {\r\n      relativeTo: this.route,\r\n      queryParams: { contentId: this.courseContents[targetIndex].id },\r\n      queryParamsHandling: 'merge'\r\n    });\r\n  }\r\n}\r\n\r\n","<div class=\"course-container\" *ngIf=\"!isLoading && course\">\r\n  <div class=\"course-main\">\r\n    <div class=\"video-container\">\r\n      <div class=\"media-placeholder\" *ngIf=\"selectedContent && selectedContent.mediaId\">\r\n        <!-- Display media based on type -->\r\n        <img *ngIf=\"selectedContent.media && selectedContent.media.type === 'image'\" [src]=\"getMediaUrl(selectedContent.media.url)\" alt=\"Content media\" class=\"content-media\">\r\n        <video #videoElement *ngIf=\"selectedContent.media && selectedContent.media.type === 'video'\" [src]=\"getMediaUrl(selectedContent.media.url)\" controls class=\"content-media\"></video>\r\n        <div class=\"play-button\" *ngIf=\"selectedContent.media && selectedContent.media.type === 'video'\" (click)=\"playVideo($event)\">\r\n          <mat-icon>play_arrow</mat-icon>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Display course thumbnail if no content is selected -->\r\n      <div class=\"media-placeholder\" *ngIf=\"(!selectedContent || !selectedContent.mediaId) && course.mediaId && course.media\">\r\n        <img [src]=\"getMediaUrl(course.media.url)\" alt=\"Course thumbnail\" class=\"course-thumbnail\">\r\n      </div>\r\n      \r\n      <!-- Fallback if no media is available -->\r\n      <div class=\"media-placeholder no-media\" *ngIf=\"(!selectedContent || !selectedContent.mediaId) && (!course.mediaId || !course.media)\">\r\n        <mat-icon>image</mat-icon>\r\n        <p>No media available</p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"course-info\">\r\n      <h1 class=\"course-title\">{{course.title}}</h1>\r\n      <p class=\"lesson-title\" *ngIf=\"selectedContent\">{{selectedContent.title}}</p>\r\n      <p class=\"course-meta\" *ngIf=\"course.category\">\r\n        <span class=\"category\">{{course.category.name}}</span>\r\n        <span class=\"duration\">{{course.duration}} min</span>\r\n        <span class=\"language\" *ngIf=\"course.language\">{{course.language}}</span>\r\n      </p>\r\n      <div class=\"tags-container\" *ngIf=\"course.tags && course.tags.length > 0\">\r\n        <span class=\"tag\" *ngFor=\"let tag of course.tags\">{{tag.name}}</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"lesson-content\" *ngIf=\"selectedContent\">\r\n      <h2>{{selectedContent.title}}</h2>\r\n      <div class=\"content-text\" [innerHTML]=\"selectedContent.textContent\"></div>\r\n      <p class=\"duration-info\">\r\n        <mat-icon>schedule</mat-icon> {{selectedContent.duration}} minutes\r\n      </p>\r\n      \r\n      <div class=\"content-navigation\">\r\n        <button mat-button (click)=\"navigateContent('prev')\" color=\"primary\">\r\n          <mat-icon>navigate_before</mat-icon> Previous\r\n        </button>\r\n        <button mat-button (click)=\"navigateContent('next')\" color=\"primary\">\r\n          Next <mat-icon>navigate_next</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"course-description\" *ngIf=\"!selectedContent\">\r\n      <h2>About this course</h2>\r\n      <div class=\"description-text\" [innerHTML]=\"course.description\"></div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"course-sidebar\">\r\n    <div class=\"sidebar-header\">\r\n      <h2>Course Content</h2>\r\n      <span class=\"content-count\">{{courseContents.length}} items</span>\r\n    </div>\r\n\r\n    <mat-list class=\"contents-list\">\r\n      <mat-list-item \r\n        *ngFor=\"let content of courseContents\" \r\n        class=\"content-item\"\r\n        [class.active]=\"selectedContent && selectedContent.id === content.id\"\r\n        (click)=\"selectContent(content)\">\r\n        <div class=\"content-item-inner\">\r\n          <div class=\"content-icon\">\r\n            <mat-icon *ngIf=\"content.media && content.media.type === 'video'\">play_circle_outline</mat-icon>\r\n            <mat-icon *ngIf=\"content.media && content.media.type === 'image'\">image</mat-icon>\r\n            <mat-icon *ngIf=\"!content.media\">article</mat-icon>\r\n          </div>\r\n          <div class=\"content-details\">\r\n            <span class=\"content-title\">{{content.title}}</span>\r\n            <span class=\"content-duration\">{{content.duration}} min</span>\r\n          </div>\r\n        </div>\r\n      </mat-list-item>\r\n    </mat-list>\r\n\r\n    <div class=\"action-buttons\">\r\n      <button mat-flat-button color=\"primary\" class=\"back-button\" routerLink=\"/Courses\">\r\n        Back to Courses\r\n      </button>\r\n      <button mat-stroked-button [routerLink]=\"['/Courses/Edit', course.id]\" *ngIf=\"course.id\">\r\n        <mat-icon>edit</mat-icon> Edit Course\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Loading spinner -->\r\n<div class=\"loading-container\" *ngIf=\"isLoading\">\r\n  <mat-spinner></mat-spinner>\r\n  <p>Loading course...</p>\r\n</div>\r\n\r\n<!-- No course found message -->\r\n<div class=\"not-found-container\" *ngIf=\"!isLoading && !course\">\r\n  <mat-icon class=\"not-found-icon\">error_outline</mat-icon>\r\n  <h2>Course not found</h2>\r\n  <p>The course you're looking for could not be found.</p>\r\n  <button mat-flat-button color=\"primary\" routerLink=\"/Courses\">Back to Courses</button>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { PageEvent } from '@angular/material/paginator';\r\nimport { Router } from '@angular/router';\r\nimport { forkJoin } from 'rxjs';\r\nimport { Course } from 'shared-lib';\r\nimport { CourseSearchParams } from 'shared-lib';\r\nimport { Category } from 'shared-lib';\r\nimport { Tag } from 'shared-lib';\r\nimport { CourseService } from 'shared-lib';\r\nimport { CategoryService } from 'shared-lib';\r\nimport { TagService } from 'shared-lib';\r\nimport { AuthService } from 'shared-lib';\r\n\r\n@Component({\r\n  selector: 'app-course-catalog',\r\n  templateUrl: './course-catalog.component.html',\r\n  styleUrls: ['./course-catalog.component.scss'],\r\n  standalone: false\r\n})\r\nexport class CourseCatalogComponent implements OnInit {\r\n  courses: Course[] = [];\r\n  categories: Category[] = [];\r\n  tags: Tag[] = [];\r\n  languages: string[] = [];\r\n  uniqueLanguages = new Set<string>();\r\n  \r\n  searchForm: FormGroup;\r\n  isLoading = true;\r\n  \r\n  // Pagination\r\n  totalCourses = 0;\r\n  pageSize = 6;\r\n  currentPage = 0;\r\n  pageSizeOptions: number[] = [6, 12, 24, 48];\r\n  \r\n  // User info\r\n  companyId: number;\r\n  userRole: string;\r\n\r\n  constructor(\r\n    private courseService: CourseService,\r\n    private categoryService: CategoryService,\r\n    private tagService: TagService,\r\n    private authService: AuthService,\r\n    private fb: FormBuilder,\r\n    private snackBar: MatSnackBar,\r\n    private router: Router,\r\n    private dialog: MatDialog\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    this.loadCurrentUser();\r\n    this.loadFilterData();\r\n  }\r\n\r\n  private initForm(): void {\r\n    this.searchForm = this.fb.group({\r\n      searchTerm: [''],\r\n      categoryId: [null],\r\n      language: [''],\r\n      tagIds: [[]],\r\n      minPrice: [null],\r\n      maxPrice: [null]\r\n    });\r\n  }\r\n\r\n  private loadCurrentUser(): void {\r\n    const user = this.authService.getCurrentUser();\r\n    if (user) {\r\n      this.userRole = user.role || '';\r\n      \r\n      // Verificar se o usuário tem permissão para acessar esta página\r\n      if (this.userRole !== 'Company') {\r\n        this.snackBar.open('Você não tem permissão para acessar esta página.', 'Fechar', {\r\n          duration: 3000\r\n        });\r\n        this.router.navigate(['/Dashboard']);\r\n      } else {\r\n        this.searchCourses();\r\n      }\r\n    } else {\r\n      this.snackBar.open('Você precisa estar logado para acessar esta página.', 'Fechar', {\r\n        duration: 3000\r\n      });\r\n      this.router.navigate(['/Login']);\r\n    }\r\n  }\r\n\r\n  private loadFilterData(): void {\r\n    forkJoin({\r\n      categories: this.categoryService.getAll(),\r\n      tags: this.tagService.getAll()\r\n    }).subscribe({\r\n      next: (results) => {\r\n        this.categories = results.categories;\r\n        this.tags = results.tags;\r\n      },\r\n      error: (error) => {\r\n        console.error('Erro ao carregar dados de filtro:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  searchCourses(): void {\r\n    this.isLoading = true;\r\n    \r\n    const searchParams: CourseSearchParams = {\r\n      ...this.searchForm.value,\r\n      onlyPublished: true,\r\n      page: this.currentPage + 1, // API usa página 1-indexada\r\n      pageSize: this.pageSize\r\n    };\r\n    \r\n    this.courseService.searchCourses(searchParams).subscribe({\r\n      next: (result) => {\r\n        this.courses = result.courses;\r\n        this.totalCourses = result.totalCount;\r\n        \r\n        // Extrair idiomas únicos dos cursos\r\n        this.courses.forEach(course => {\r\n          if (course.language) {\r\n            this.uniqueLanguages.add(course.language);\r\n          }\r\n        });\r\n        \r\n        this.languages = Array.from(this.uniqueLanguages).sort();\r\n        this.isLoading = false;\r\n      },\r\n      error: (error) => {\r\n        console.error('Erro ao buscar cursos:', error);\r\n        this.snackBar.open('Erro ao buscar cursos. Tente novamente.', 'Fechar', {\r\n          duration: 3000\r\n        });\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  onPageChange(event: PageEvent): void {\r\n    this.currentPage = event.pageIndex;\r\n    this.pageSize = event.pageSize;\r\n    this.searchCourses();\r\n  }\r\n\r\n  onFilterChange(): void {\r\n    this.currentPage = 0;\r\n    this.searchCourses();\r\n  }\r\n\r\n  resetFilters(): void {\r\n    this.searchForm.reset({\r\n      searchTerm: '',\r\n      categoryId: null,\r\n      language: '',\r\n      tagIds: [],\r\n      minPrice: null,\r\n      maxPrice: null\r\n    });\r\n    this.currentPage = 0;\r\n    this.searchCourses();\r\n  }\r\n\r\n  viewCourse(courseId: number): void {\r\n    this.router.navigate(['/course-details', courseId]);\r\n  }\r\n}\r\n\r\n","<div class=\"catalog-container\">\r\n  <h1>Catálogo de Cursos</h1>\r\n  \r\n  <!-- Seção de Filtros -->\r\n  <div class=\"filter-section\">\r\n    <h2>Filtrar Cursos</h2>\r\n    <form [formGroup]=\"searchForm\" (change)=\"onFilterChange()\">\r\n      <div class=\"filter-form\">\r\n        <!-- Busca por termo -->\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Buscar cursos</mat-label>\r\n          <input matInput formControlName=\"searchTerm\" placeholder=\"Digite um termo para busca\">\r\n          <mat-icon matPrefix>search</mat-icon>\r\n        </mat-form-field>\r\n        \r\n        <!-- Filtro por categoria -->\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Categoria</mat-label>\r\n          <mat-select formControlName=\"categoryId\">\r\n            <mat-option [value]=\"null\">Todas as categorias</mat-option>\r\n            <mat-option *ngFor=\"let category of categories\" [value]=\"category.id\">\r\n              {{category.name}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        \r\n        <!-- Filtro por idioma -->\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Idioma</mat-label>\r\n          <mat-select formControlName=\"language\">\r\n            <mat-option [value]=\"''\">Todos os idiomas</mat-option>\r\n            <mat-option *ngFor=\"let lang of languages\" [value]=\"lang\">\r\n              {{lang}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        \r\n        <!-- Filtro por tags -->\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Tags</mat-label>\r\n          <mat-select formControlName=\"tagIds\" multiple>\r\n            <mat-option *ngFor=\"let tag of tags\" [value]=\"tag.id\">\r\n              {{tag.name}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        \r\n        <!-- Filtro por preço mínimo -->\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Preço mínimo</mat-label>\r\n          <input matInput type=\"number\" min=\"0\" formControlName=\"minPrice\">\r\n          <mat-icon matPrefix>attach_money</mat-icon>\r\n        </mat-form-field>\r\n        \r\n        <!-- Filtro por preço máximo -->\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Preço máximo</mat-label>\r\n          <input matInput type=\"number\" min=\"0\" formControlName=\"maxPrice\">\r\n          <mat-icon matPrefix>attach_money</mat-icon>\r\n        </mat-form-field>\r\n      </div>\r\n      \r\n      <div class=\"filter-actions\">\r\n        <button mat-stroked-button color=\"warn\" type=\"button\" (click)=\"resetFilters()\">\r\n          <mat-icon>clear</mat-icon>\r\n          Limpar filtros\r\n        </button>\r\n        <button mat-raised-button color=\"primary\" type=\"button\" (click)=\"searchCourses()\">\r\n          <mat-icon>search</mat-icon>\r\n          Buscar\r\n        </button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n  \r\n  <!-- Resultados da Busca -->\r\n  <div class=\"search-results\" *ngIf=\"!isLoading\">\r\n    <h2>Resultados ({{totalCourses}} cursos encontrados)</h2>\r\n    \r\n    <!-- Grid de Cursos -->\r\n    <div class=\"course-grid\" *ngIf=\"courses.length > 0\">\r\n      <mat-card class=\"course-card\" *ngFor=\"let course of courses\">\r\n        <img *ngIf=\"course.media?.url\" mat-card-image [src]=\"course.media?.url\" [alt]=\"course.title\" class=\"course-image\">\r\n        <img *ngIf=\"!course.media?.url\" mat-card-image src=\"assets/images/course-placeholder.jpg\" alt=\"Imagem do curso\" class=\"course-image\">\r\n        \r\n        <mat-card-header>\r\n          <mat-card-title>{{course.title}}</mat-card-title>\r\n          <mat-card-subtitle>{{course.category?.name}}</mat-card-subtitle>\r\n        </mat-card-header>\r\n        \r\n        <mat-card-content>\r\n          <p>{{ (course.description || '') | slice:0:100 }}{{ (course.description?.length || 0) > 100 ? '...' : '' }}</p>\r\n          \r\n          <div class=\"course-details\">\r\n            <div>\r\n              <mat-icon>schedule</mat-icon>\r\n              <span>{{course.duration}} minutos</span>\r\n            </div>\r\n            \r\n            <div *ngIf=\"course.language\">\r\n              <mat-icon>language</mat-icon>\r\n              <span>{{course.language}}</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"course-tags\">\r\n            <mat-chip-listbox>\r\n              <mat-chip *ngFor=\"let tag of course.tags\">{{tag.name}}</mat-chip>\r\n            </mat-chip-listbox>\r\n          </div>\r\n          \r\n          <div class=\"course-price\">\r\n            R$ {{course.price | number:'1.2-2'}}\r\n          </div>\r\n        </mat-card-content>\r\n        \r\n        <mat-card-actions>\r\n          <button mat-button color=\"primary\" (click)=\"viewCourse(course.id)\">\r\n            <mat-icon>visibility</mat-icon>\r\n            Ver detalhes\r\n          </button>\r\n        </mat-card-actions>\r\n      </mat-card>\r\n    </div>\r\n    \r\n    <!-- Mensagem de nenhum curso encontrado -->\r\n    <div class=\"no-courses\" *ngIf=\"courses.length === 0\">\r\n      <mat-icon>search_off</mat-icon>\r\n      <h3>Nenhum curso encontrado com os filtros atuais</h3>\r\n      <button mat-stroked-button color=\"primary\" (click)=\"resetFilters()\">\r\n        <mat-icon>refresh</mat-icon>\r\n        Limpar filtros e tentar novamente\r\n      </button>\r\n    </div>\r\n    \r\n    <!-- Paginação -->\r\n    <mat-paginator\r\n      [length]=\"totalCourses\"\r\n      [pageSize]=\"pageSize\"\r\n      [pageSizeOptions]=\"pageSizeOptions\"\r\n      [pageIndex]=\"currentPage\"\r\n      (page)=\"onPageChange($event)\"\r\n      *ngIf=\"totalCourses > 0\">\r\n    </mat-paginator>\r\n  </div>\r\n  \r\n  <!-- Indicador de carregamento -->\r\n  <div class=\"loading-container\" *ngIf=\"isLoading\">\r\n    <mat-spinner diameter=\"50\"></mat-spinner>\r\n    <p>Carregando cursos...</p>\r\n  </div>\r\n</div>","import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n\r\nexport interface ConfirmDialogData {\r\n  title: string;\r\n  message: string;\r\n  confirmText: string;\r\n  cancelText: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog',\r\n  templateUrl: './confirm-dialog.component.html',\r\n  styleUrls: ['./confirm-dialog.component.scss'],\r\n  standalone: false\r\n})\r\nexport class ConfirmDialogComponent {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ConfirmDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: ConfirmDialogData\r\n  ) { }\r\n\r\n  onConfirm(): void {\r\n    this.dialogRef.close(true);\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close(false);\r\n  }\r\n}\r\n\r\n","<div mat-dialog-content>\r\n  <h2 mat-dialog-title>{{data.title}}</h2>\r\n  <p>{{data.message}}</p>\r\n</div>\r\n\r\n<div mat-dialog-actions>\r\n  <button mat-button (click)=\"onCancel()\">{{data.cancelText || 'Cancelar'}}</button>\r\n  <button mat-button color=\"primary\" (click)=\"onConfirm()\">{{data.confirmText || 'Confirmar'}}</button>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Course } from 'shared-lib';\r\nimport { CourseService } from 'shared-lib';\r\nimport { AuthService } from 'shared-lib';\r\nimport { ConfirmDialogComponent } from '../../components/shared/confirm-dialog/confirm-dialog.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\n@Component({\r\n  selector: 'app-course-details',\r\n  templateUrl: './course-details.component.html',\r\n  styleUrls: ['./course-details.component.scss'],\r\n  standalone: false\r\n})\r\nexport class CourseDetailsComponent implements OnInit {\r\n  course: Course;\r\n  isLoading = true;\r\n  courseOwned = false;\r\n  errorMessage: string;\r\n\r\n  constructor(\r\n    private courseService: CourseService,\r\n    private authService: AuthService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private dialog: MatDialog,\r\n    private snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    const courseId = this.route.snapshot.paramMap.get('id');\r\n    if (courseId) {\r\n      this.loadCourse(courseId);\r\n    } else {\r\n      this.errorMessage = 'ID do curso não especificado';\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  loadCourse(courseId: string): void {\r\n    this.isLoading = true;\r\n    this.courseService.getCourse(parseInt(courseId)).subscribe({\r\n      next: (course) => {\r\n        this.course = course;\r\n        this.checkCourseOwnership(courseId);\r\n      },\r\n      error: (error) => {\r\n        console.error('Erro ao carregar o curso:', error);\r\n        this.errorMessage = 'Não foi possível carregar o curso. Por favor, tente novamente mais tarde.';\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  checkCourseOwnership(courseId: string): void {\r\n    const currentUser = this.authService.getCurrentUser();\r\n    \r\n    if (currentUser && currentUser.companyId) {\r\n      this.courseService.isCourseOwnedByCompany(parseInt(courseId), currentUser.companyId).subscribe({\r\n        next: (owned) => {\r\n          this.courseOwned = owned;\r\n          this.isLoading = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Erro ao verificar propriedade do curso:', error);\r\n          this.courseOwned = false;\r\n          this.isLoading = false;\r\n        }\r\n      });\r\n    } else {\r\n      this.courseOwned = false;\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  purchaseCourse(): void {\r\n    const currentUser = this.authService.getCurrentUser();\r\n    \r\n    if (!currentUser || currentUser.role !== 'Company') {\r\n      this.snackBar.open('Você precisa estar logado como empresa para comprar este curso.', 'Fechar', {\r\n        duration: 5000\r\n      });\r\n      return;\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\r\n      data: {\r\n        title: 'Confirmar Compra',\r\n        message: `Deseja realmente adquirir o curso \"${this.course.title}\" por R$ ${this.course.price.toFixed(2)}?`,\r\n        confirmText: 'Comprar',\r\n        cancelText: 'Cancelar'\r\n      }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.isLoading = true;\r\n        \r\n        const courseId = this.course.id || 0;\r\n        const companyId = currentUser.companyId || 0;\r\n        this.courseService.purchaseCourse(courseId, companyId).subscribe({\r\n          next: (response) => {\r\n            this.snackBar.open('Curso adquirido com sucesso!', 'Fechar', {\r\n              duration: 5000\r\n            });\r\n            this.courseOwned = true;\r\n            this.isLoading = false;\r\n          },\r\n          error: (error) => {\r\n            console.error('Erro ao comprar o curso:', error);\r\n            this.snackBar.open('Ocorreu um erro ao adquirir o curso. Por favor, tente novamente.', 'Fechar', {\r\n              duration: 5000\r\n            });\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  goBackToCatalog(): void {\r\n    this.router.navigate(['/course-catalog']);\r\n  }\r\n}\r\n\r\n","<div class=\"course-details-container\">\r\n  <!-- Botão de Retorno -->\r\n  <div class=\"back-button\">\r\n    <button mat-stroked-button (click)=\"goBackToCatalog()\">\r\n      <mat-icon>arrow_back</mat-icon> Voltar ao Catálogo\r\n    </button>\r\n  </div>\r\n\r\n  <!-- Indicador de carregamento -->\r\n  <div *ngIf=\"isLoading\" class=\"loading-container\">\r\n    <mat-spinner diameter=\"50\"></mat-spinner>\r\n    <p>Carregando curso...</p>\r\n  </div>\r\n\r\n  <!-- Mensagem de erro -->\r\n  <div *ngIf=\"!isLoading && errorMessage\" class=\"error-container\">\r\n    <mat-icon color=\"warn\">error</mat-icon>\r\n    <h2>{{errorMessage}}</h2>\r\n    <button mat-raised-button color=\"primary\" (click)=\"goBackToCatalog()\">\r\n      Voltar ao Catálogo\r\n    </button>\r\n  </div>\r\n\r\n  <!-- Detalhes do curso -->\r\n  <div *ngIf=\"!isLoading && !errorMessage && course\" class=\"course-content\">\r\n    <div class=\"course-header\">\r\n      <!-- Imagem do curso -->\r\n      <div class=\"course-image\">\r\n        <img *ngIf=\"course.media?.url\" [src]=\"course.media?.url || 'assets/images/course-placeholder.jpg'\" [alt]=\"course.title\">\r\n        <img *ngIf=\"!course.media?.url\" src=\"assets/images/course-placeholder.jpg\" alt=\"Imagem do curso\">\r\n      </div>\r\n\r\n      <!-- Informações do cabeçalho -->\r\n      <div class=\"course-header-info\">\r\n        <h1>{{course.title}}</h1>\r\n        \r\n        <div class=\"course-metadata\">\r\n          <div *ngIf=\"course.category\">\r\n            <mat-icon>category</mat-icon>\r\n            <span>{{course.category.name}}</span>\r\n          </div>\r\n          \r\n          <div *ngIf=\"course.language\">\r\n            <mat-icon>language</mat-icon>\r\n            <span>{{course.language}}</span>\r\n          </div>\r\n          \r\n          <div>\r\n            <mat-icon>schedule</mat-icon>\r\n            <span>{{course.duration}} minutos</span>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Tags do curso -->\r\n        <div class=\"course-tags\">\r\n          <mat-chip-listbox>\r\n            <mat-chip *ngFor=\"let tag of course.tags\">{{tag.name}}</mat-chip>\r\n          </mat-chip-listbox>\r\n        </div>\r\n\r\n        <!-- Preço e botão de compra -->\r\n        <div class=\"purchase-section\">\r\n          <div class=\"course-price\">\r\n            <span>Preço:</span>\r\n            <h2>R$ {{course.price | number:'1.2-2'}}</h2>\r\n          </div>\r\n\r\n          <div class=\"purchase-actions\">\r\n            <button \r\n              *ngIf=\"!courseOwned\" \r\n              mat-raised-button \r\n              color=\"primary\" \r\n              (click)=\"purchaseCourse()\"\r\n              [disabled]=\"isLoading\">\r\n              <mat-icon>shopping_cart</mat-icon>\r\n              Comprar este curso\r\n            </button>\r\n            \r\n            <div *ngIf=\"courseOwned\" class=\"course-owned\">\r\n              <mat-icon color=\"accent\">check_circle</mat-icon>\r\n              <span>Curso já adquirido</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Descrição do curso -->\r\n    <mat-card class=\"course-description\">\r\n      <mat-card-header>\r\n        <mat-card-title>Descrição do Curso</mat-card-title>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>{{course.description}}</p>\r\n      </mat-card-content>\r\n    </mat-card>\r\n\r\n    <!-- Conteúdo do curso -->\r\n    <mat-card *ngIf=\"course.contents && course.contents.length > 0\" class=\"course-content-list\">\r\n      <mat-card-header>\r\n        <mat-card-title>Conteúdo do Curso</mat-card-title>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <mat-list>\r\n          <mat-list-item *ngFor=\"let content of course.contents; let i = index\">\r\n            <mat-icon mat-list-icon>article</mat-icon>\r\n            <div mat-line>{{i + 1}}. {{content.title}}</div>\r\n            <div mat-line *ngIf=\"content.textContent\">{{content.textContent}}</div>\r\n          </mat-list-item>\r\n        </mat-list>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\n\r\n// Angular Material Imports\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatListModule } from '@angular/material/list';\r\n\r\n// Components (will be created)\r\nimport { CoursesListComponent } from './components/courses-list/courses-list.component';\r\nimport { CourseCreateComponent } from './components/course-create/course-create.component';\r\nimport { CourseDetailComponent } from './components/course-detail/course-detail.component';\r\nimport { CourseCatalogComponent } from './components/course-catalog/course-catalog.component';\r\nimport { CourseDetailsComponent } from './components/course-details/course-details.component';\r\nimport { ConfirmDialogComponent } from './components/shared/confirm-dialog/confirm-dialog.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: CoursesListComponent },\r\n  { path: 'create', component: CourseCreateComponent },\r\n  { path: 'edit/:courseId', component: CourseCreateComponent },\r\n  { path: 'detail/:courseId', component: CourseDetailComponent },\r\n  { path: 'catalog', component: CourseCatalogComponent },\r\n  { path: 'details/:id', component: CourseDetailsComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CoursesListComponent,\r\n    CourseCreateComponent,\r\n    CourseDetailComponent,\r\n    CourseCatalogComponent,\r\n    CourseDetailsComponent,\r\n    ConfirmDialogComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    DragDropModule,\r\n    RouterModule.forChild(routes),\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatSelectModule,\r\n    MatChipsModule,\r\n    MatTabsModule,\r\n    MatStepperModule,\r\n    MatProgressSpinnerModule,\r\n    MatMenuModule,\r\n    MatListModule\r\n  ]\r\n})\r\nexport class CoursesModule { }\r\n","/*\r\n * Public API Surface of mfe-courses\r\n */\r\n\r\nexport * from './lib/courses.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i4","i5","i6","i1","i2","i3","i7","i8","i9","i10","i11","i12","i13","i15"],"mappings":"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"}