{"version":3,"file":"mfe-company.mjs","sources":["../../../projects/mfe-company/src/lib/components/company-management/add-user-dialog/add-user-dialog.component.ts","../../../projects/mfe-company/src/lib/components/company-management/add-user-dialog/add-user-dialog.component.html","../../../projects/mfe-company/src/lib/components/company-management/group-dialog/group-dialog.component.ts","../../../projects/mfe-company/src/lib/components/company-management/group-dialog/group-dialog.component.html","../../../projects/mfe-company/src/lib/components/company-management/confirm-dialog/confirm-dialog.component.ts","../../../projects/mfe-company/src/lib/components/company-management/confirm-dialog/confirm-dialog.component.html","../../../projects/mfe-company/src/lib/components/company-management/company-management.component.ts","../../../projects/mfe-company/src/lib/components/company-management/company-management.component.html","../../../projects/mfe-company/src/lib/components/company-register/company-register.component.ts","../../../projects/mfe-company/src/lib/components/company-register/company-register.component.html","../../../projects/mfe-company/src/lib/company.module.ts","../../../projects/mfe-company/src/public-api.ts","../../../projects/mfe-company/src/mfe-company.ts"],"sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { User } from 'shared-lib';\r\n\r\ninterface DialogData {\r\n  companyId: number;\r\n  groupId: number;\r\n  existingUsers: User[];\r\n  groupUsers: User[];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-add-user-dialog',\r\n  templateUrl: './add-user-dialog.component.html',\r\n  styleUrls: ['./add-user-dialog.component.scss'],\r\n  standalone: false\r\n})\r\nexport class AddUserDialogComponent implements OnInit {\r\n  availableUsers: User[] = [];\r\n  selectedUserId: number | null = null;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AddUserDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: DialogData\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.filterAvailableUsers();\r\n  }\r\n\r\n  filterAvailableUsers(): void {\r\n    // Filtrar usuários que já pertencem a este grupo\r\n    const existingUserIds = this.data.groupUsers.map(user => user.id);\r\n    this.availableUsers = this.data.existingUsers.filter(user => \r\n      !existingUserIds.includes(user.id)\r\n    );\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.selectedUserId) {\r\n      this.dialogRef.close({ userId: this.selectedUserId });\r\n    }\r\n  }\r\n}\r\n\r\n","<h2 mat-dialog-title>Adicionar Usuário ao Grupo</h2>\r\n\r\n<mat-dialog-content>\r\n  <div *ngIf=\"availableUsers.length > 0\">\r\n    <p>Selecione um usuário para adicionar ao grupo:</p>\r\n    \r\n    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n      <mat-label>Selecionar Usuário</mat-label>\r\n      <mat-select [(value)]=\"selectedUserId\">\r\n        <mat-option *ngFor=\"let user of availableUsers\" [value]=\"user.id\">\r\n          {{user.fullName}} ({{user.email}})\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n  \r\n  <div *ngIf=\"availableUsers.length === 0\">\r\n    <p>Não há usuários disponíveis para adicionar a este grupo.</p>\r\n  </div>\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions align=\"end\">\r\n  <button mat-button (click)=\"onCancel()\">Cancelar</button>\r\n  <button mat-raised-button color=\"primary\" [disabled]=\"!selectedUserId\" (click)=\"onSubmit()\">\r\n    Adicionar\r\n  </button>\r\n</mat-dialog-actions>","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { Group } from 'shared-lib';\r\n\r\ninterface DialogData {\r\n  group?: Group;\r\n  companyId: number;\r\n  isEditMode: boolean;\r\n  existingGroups: Group[];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-group-dialog',\r\n  templateUrl: './group-dialog.component.html',\r\n  styleUrls: ['./group-dialog.component.scss'],\r\n  standalone: false\r\n})\r\nexport class GroupDialogComponent implements OnInit {\r\n  groupForm: FormGroup;\r\n  dialogTitle: string;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    public dialogRef: MatDialogRef<GroupDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: DialogData\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.dialogTitle = this.data.isEditMode ? 'Editar Grupo' : 'Novo Grupo';\r\n    this.initForm();\r\n  }\r\n\r\n  initForm(): void {\r\n    this.groupForm = this.fb.group({\r\n      id: [this.data.group?.id || 0],\r\n      name: [this.data.group?.name || '', [Validators.required, Validators.maxLength(100)]],\r\n      description: [this.data.group?.description || '', [Validators.maxLength(200)]],\r\n      companyId: [this.data.companyId]\r\n    });\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.groupForm.valid) {\r\n      const groupData: Group = this.groupForm.value;\r\n      const groupName = groupData.name.toLowerCase();\r\n      \r\n      // Verificar se é o grupo Admin sendo editado\r\n      if (this.data.isEditMode && this.data.group?.name.toLowerCase() === 'admin') {\r\n        alert('Não é permitido editar o grupo Admin.');\r\n        return;\r\n      }\r\n      \r\n      // Verificar se está tentando criar um novo grupo com o nome \"Admin\"\r\n      if (!this.data.isEditMode && groupName === 'admin') {\r\n        alert('O nome \"Admin\" é reservado para o grupo padrão do sistema.');\r\n        return;\r\n      }\r\n      \r\n      // Verificar se está tentando renomear um grupo para \"Admin\"\r\n      if (this.data.isEditMode && this.data.group?.name.toLowerCase() !== 'admin' && groupName === 'admin') {\r\n        alert('O nome \"Admin\" é reservado para o grupo padrão do sistema.');\r\n        return;\r\n      }\r\n      \r\n      // Verificar se já existe um grupo com esse nome\r\n      const nameExists = this.data.existingGroups.some(g => \r\n        g.name.toLowerCase() === groupName && g.id !== groupData.id);\r\n        \r\n      if (nameExists) {\r\n        alert('Já existe um grupo com este nome na empresa.');\r\n        return;\r\n      }\r\n      \r\n      this.dialogRef.close(groupData);\r\n    }\r\n  }\r\n}\r\n\r\n","<h2 mat-dialog-title>{{ dialogTitle }}</h2>\r\n<form [formGroup]=\"groupForm\" (ngSubmit)=\"onSubmit()\">\r\n  <mat-dialog-content>\r\n    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n      <mat-label>Nome do Grupo</mat-label>\r\n      <input matInput formControlName=\"name\" placeholder=\"Nome do grupo\">\r\n      <mat-error *ngIf=\"groupForm.get('name')?.hasError('required')\">\r\n        Nome do grupo é obrigatório\r\n      </mat-error>\r\n      <mat-error *ngIf=\"groupForm.get('name')?.hasError('maxlength')\">\r\n        Nome do grupo deve ter no máximo 100 caracteres\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n      <mat-label>Descrição</mat-label>\r\n      <textarea matInput formControlName=\"description\" placeholder=\"Descrição do grupo\" rows=\"3\"></textarea>\r\n      <mat-error *ngIf=\"groupForm.get('description')?.hasError('maxlength')\">\r\n        Descrição deve ter no máximo 200 caracteres\r\n      </mat-error>\r\n    </mat-form-field>\r\n  </mat-dialog-content>\r\n\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-button type=\"button\" (click)=\"onCancel()\">Cancelar</button>\r\n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"groupForm.invalid\">Salvar</button>\r\n  </mat-dialog-actions>\r\n</form>","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { Group } from 'shared-lib';\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog',\r\n  templateUrl: './confirm-dialog.component.html',\r\n  styleUrls: ['./confirm-dialog.component.scss'],\r\n  standalone: false\r\n})\r\nexport class ConfirmDialogComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ConfirmDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: { \r\n      group: Group; \r\n      isAdminGroup: boolean;\r\n      message?: string;\r\n    }\r\n  ) {}\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close(false);\r\n  }\r\n\r\n  onConfirm(): void {\r\n    this.dialogRef.close(true);\r\n  }\r\n}\r\n\r\n","<h2 mat-dialog-title>Confirmar Exclusão</h2>\r\n<mat-dialog-content>\r\n  <p *ngIf=\"!data.message\">Tem certeza que deseja excluir o grupo <strong>{{ data.group.name }}</strong>?</p>\r\n  <p *ngIf=\"data.message\">{{ data.message }}</p>\r\n  \r\n  <div *ngIf=\"data.isAdminGroup\" class=\"warning-message\">\r\n    <mat-icon color=\"warn\">warning</mat-icon>\r\n    <span>Não é possível excluir o grupo Admin pois ele é essencial para o funcionamento da aplicação.</span>\r\n  </div>\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions align=\"end\">\r\n  <button mat-button (click)=\"onCancel()\">Cancelar</button>\r\n  <button mat-raised-button color=\"warn\" (click)=\"onConfirm()\" [disabled]=\"data.isAdminGroup\">Excluir</button>\r\n</mat-dialog-actions>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Company } from 'shared-lib';\r\nimport { User } from 'shared-lib';\r\nimport { Group } from 'shared-lib';\r\nimport { CompanyManagementService } from 'shared-lib';\r\nimport { GroupService } from 'shared-lib';\r\nimport { AddUserDialogComponent } from './add-user-dialog/add-user-dialog.component';\r\nimport { GroupDialogComponent } from './group-dialog/group-dialog.component';\r\nimport { ConfirmDialogComponent } from './confirm-dialog/confirm-dialog.component';\r\n\r\n@Component({\r\n  selector: 'app-company-management',\r\n  templateUrl: './company-management.component.html',\r\n  styleUrls: ['./company-management.component.scss'],\r\n  standalone: false\r\n})\r\nexport class CompanyManagementComponent implements OnInit {\r\n  company: Company;\r\n  users: User[] = [];\r\n  groups: Group[] = [];\r\n  companyForm: FormGroup;\r\n  isLoading = true;\r\n  activeTab = 0;\r\n  \r\n  constructor(\r\n    private companyManagementService: CompanyManagementService,\r\n    private groupService: GroupService,\r\n    private fb: FormBuilder,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    this.loadCompanyData();\r\n  }\r\n\r\n  initForm(): void {\r\n    this.companyForm = this.fb.group({\r\n      id: [0],\r\n      name: ['', [Validators.required, Validators.maxLength(100)]],\r\n      domain: ['', Validators.maxLength(50)]\r\n    });\r\n  }\r\n\r\n  loadCompanyData(): void {\r\n    this.isLoading = true;\r\n    \r\n    this.companyManagementService.getMyCompany().subscribe({\r\n      next: (company) => {\r\n        this.company = company;\r\n        this.companyForm.patchValue(company);\r\n        \r\n        // Carregar usuários da empresa\r\n        this.loadCompanyUsers();\r\n        \r\n        // Carregar grupos da empresa\r\n        this.loadCompanyGroups();\r\n      },\r\n      error: (error) => {\r\n        console.error('Erro ao carregar dados da empresa', error);\r\n        this.snackBar.open('Erro ao carregar dados da empresa. Por favor, tente novamente.', 'Fechar', {\r\n          duration: 5000\r\n        });\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  loadCompanyUsers(): void {\r\n    this.companyManagementService.getCompanyUsers(this.company.id).subscribe({\r\n      next: (users) => {\r\n        this.users = users;\r\n        this.isLoading = false;\r\n      },\r\n      error: (error) => {\r\n        console.error('Erro ao carregar usuários da empresa', error);\r\n        this.snackBar.open('Erro ao carregar usuários. Por favor, tente novamente.', 'Fechar', {\r\n          duration: 5000\r\n        });\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  loadCompanyGroups(): void {\r\n    // Usar o serviço de grupo para obter os grupos da empresa\r\n    this.groupService.getByCompanyId(this.company.id).subscribe({\r\n      next: (groups) => {\r\n        this.groups = groups;\r\n      },\r\n      error: (error) => {\r\n        console.error('Erro ao carregar grupos da empresa', error);\r\n        this.snackBar.open('Erro ao carregar grupos. Por favor, tente novamente.', 'Fechar', {\r\n          duration: 5000\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  saveCompany(): void {\r\n    if (this.companyForm.invalid) {\r\n      this.snackBar.open('Por favor, preencha todos os campos obrigatórios.', 'Fechar', {\r\n        duration: 5000\r\n      });\r\n      return;\r\n    }\r\n\r\n    const companyData = this.companyForm.value as Company;\r\n    \r\n    this.companyManagementService.update(companyData).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Empresa atualizada com sucesso!', 'Fechar', {\r\n          duration: 3000\r\n        });\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Erro ao atualizar empresa', error);\r\n        this.snackBar.open('Erro ao atualizar empresa. Por favor, tente novamente.', 'Fechar', {\r\n          duration: 5000\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  openAddUserDialog(group: Group): void {\r\n    const dialogRef = this.dialog.open(AddUserDialogComponent, {\r\n      width: '500px',\r\n      data: { \r\n        companyId: this.company.id,\r\n        groupId: group.id,\r\n        existingUsers: this.users,\r\n        groupUsers: group.users || []\r\n      }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.addUserToGroup(result.userId, group.id);\r\n      }\r\n    });\r\n  }\r\n\r\n  addUserToGroup(userId: number, groupId: number): void {\r\n    this.companyManagementService.addUserToGroup(userId, groupId).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Usuário adicionado ao grupo com sucesso!', 'Fechar', {\r\n          duration: 3000\r\n        });\r\n        this.loadCompanyUsers(); // Recarregar dados\r\n        this.loadCompanyGroups();\r\n      },\r\n      error: (error) => {\r\n        console.error('Erro ao adicionar usuário ao grupo', error);\r\n        // Exibir a mensagem de erro específica do servidor, se disponível\r\n        const errorMessage = error.error ? error.error : 'Erro ao adicionar usuário ao grupo. Por favor, tente novamente.';\r\n        this.snackBar.open(errorMessage, 'Fechar', {\r\n          duration: 5000\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  removeUserFromGroup(userId: number, groupId: number): void {\r\n    this.companyManagementService.removeUserFromGroup(userId, groupId).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Usuário removido do grupo com sucesso!', 'Fechar', {\r\n          duration: 3000\r\n        });\r\n        this.loadCompanyUsers(); // Recarregar dados\r\n        this.loadCompanyGroups();\r\n      },\r\n      error: (error) => {\r\n        console.error('Erro ao remover usuário do grupo', error);\r\n        // Exibir a mensagem de erro específica do servidor, se disponível\r\n        const errorMessage = error.error ? error.error : 'Erro ao remover usuário do grupo. Por favor, tente novamente.';\r\n        this.snackBar.open(errorMessage, 'Fechar', {\r\n          duration: 5000\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  getUserFullName(userId: number): string {\r\n    const user = this.users.find(u => u.id === userId);\r\n    return user && user.fullName ? user.fullName : 'Usuário desconhecido';\r\n  }\r\n\r\n  changeTab(tabIndex: number): void {\r\n    this.activeTab = tabIndex;\r\n  }\r\n  \r\n  // Métodos para gerenciamento de grupos\r\n  openGroupDialog(group?: Group): void {\r\n    // Verificar se está tentando editar o grupo Admin\r\n    if (group && group.name.toLowerCase() === 'Admin') {\r\n      this.snackBar.open('Não é permitido editar o grupo Admin, pois ele é essencial para o funcionamento da aplicação.', 'Fechar', {\r\n        duration: 5000\r\n      });\r\n      return;\r\n    }\r\n    \r\n    const dialogRef = this.dialog.open(GroupDialogComponent, {\r\n      width: '500px',\r\n      data: { \r\n        group: group,\r\n        companyId: this.company.id,\r\n        isEditMode: !!group,\r\n        existingGroups: this.groups\r\n      }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        if (result.id === 0) {\r\n          // Criar novo grupo\r\n          this.createGroup(result);\r\n        } else {\r\n          // Atualizar grupo existente\r\n          this.updateGroup(result);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  createGroup(group: Group): void {\r\n    // Verificar se já existe um grupo com o mesmo nome\r\n    const existingGroup = this.groups.find(g => g.name.toLowerCase() === group.name.toLowerCase());\r\n    \r\n    if (existingGroup) {\r\n      this.snackBar.open('Já existe um grupo com este nome na empresa.', 'Fechar', {\r\n        duration: 5000\r\n      });\r\n      return;\r\n    }\r\n    \r\n    this.groupService.create(group).subscribe({\r\n      next: (newGroup) => {\r\n        this.snackBar.open('Grupo criado com sucesso!', 'Fechar', {\r\n          duration: 3000\r\n        });\r\n        this.loadCompanyGroups();\r\n      },\r\n      error: (error) => {\r\n        console.error('Erro ao criar grupo', error);\r\n        if (error.error && typeof error.error === 'string') {\r\n          this.snackBar.open(error.error, 'Fechar', {\r\n            duration: 5000\r\n          });\r\n        } else {\r\n          this.snackBar.open('Erro ao criar grupo. Por favor, tente novamente.', 'Fechar', {\r\n            duration: 5000\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  updateGroup(group: Group): void {\r\n    // Verificar se está tentando editar o grupo Admin\r\n    if (group.name.toLowerCase() === 'Admin') {\r\n      this.snackBar.open('Não é permitido editar o grupo Admin.', 'Fechar', {\r\n        duration: 5000\r\n      });\r\n      return;\r\n    }\r\n    \r\n    // Verificar se já existe outro grupo com o mesmo nome\r\n    const existingGroup = this.groups.find(g => \r\n      g.name.toLowerCase() === group.name.toLowerCase() && g.id !== group.id);\r\n    \r\n    if (existingGroup) {\r\n      this.snackBar.open('Já existe um grupo com este nome na empresa.', 'Fechar', {\r\n        duration: 5000\r\n      });\r\n      return;\r\n    }\r\n    \r\n    this.groupService.update(group).subscribe({\r\n      next: (updatedGroup) => {\r\n        this.snackBar.open('Grupo atualizado com sucesso!', 'Fechar', {\r\n          duration: 3000\r\n        });\r\n        this.loadCompanyGroups();\r\n      },\r\n      error: (error) => {\r\n        console.error('Erro ao atualizar grupo', error);\r\n        if (error.error && typeof error.error === 'string') {\r\n          this.snackBar.open(error.error, 'Fechar', {\r\n            duration: 5000\r\n          });\r\n        } else {\r\n          this.snackBar.open('Erro ao atualizar grupo. Por favor, tente novamente.', 'Fechar', {\r\n            duration: 5000\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  confirmDeleteGroup(group: Group): void {\r\n    // Verificar se é o grupo Admin\r\n    const isAdminGroup = group.name.toLowerCase() === 'Admin';\r\n    \r\n    // Não permitir exclusão do grupo Admin\r\n    if (isAdminGroup) {\r\n      this.snackBar.open('Não é permitido excluir o grupo Admin, pois ele é essencial para o funcionamento da aplicação.', 'Fechar', {\r\n        duration: 5000\r\n      });\r\n      return;\r\n    }\r\n    \r\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\r\n      width: '400px',\r\n      data: { \r\n        group: group,\r\n        isAdminGroup: false // Já validamos que não é o grupo Admin\r\n      }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.deleteGroup(group.id);\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteGroup(groupId: number): void {\r\n    this.groupService.deleteGroup(groupId).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Grupo excluído com sucesso!', 'Fechar', {\r\n          duration: 3000\r\n        });\r\n        this.loadCompanyGroups();\r\n      },\r\n      error: (error) => {\r\n        console.error('Erro ao excluir grupo', error);\r\n        this.snackBar.open('Erro ao excluir grupo. Por favor, tente novamente.', 'Fechar', {\r\n          duration: 5000\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // Validações para usuários e grupos\r\n  isAdminUserInAdminGroup(userId: number, groupId: number): boolean {\r\n    const group = this.groups.find(g => g.id === groupId);\r\n    const user = this.users.find(u => u.id === userId);\r\n    const currentUserId = this.getCurrentUserId();\r\n    \r\n    return group?.name.toLowerCase() === 'Admin' && \r\n           currentUserId === userId;\r\n  }\r\n\r\n  getCurrentUserId(): number {\r\n    // Obter ID do usuário atual do token JWT\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      try {\r\n        const payload = token.split('.')[1];\r\n        const decodedPayload = JSON.parse(window.atob(payload));\r\n        return decodedPayload.nameid || 0;\r\n      } catch (error) {\r\n        console.error('Erro ao decodificar token', error);\r\n        return 0;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n  \r\n  confirmRemoveUserFromGroup(user: User, group: Group): void {\r\n    // Verificar se é um admin tentando sair do grupo Admin\r\n    const isAdminGroup = group.name.toLowerCase() === 'Admin';\r\n    const isCurrentUser = this.getCurrentUserId() === user.id;\r\n    \r\n    if (isAdminGroup && isCurrentUser) {\r\n      this.snackBar.open('Você não pode remover a si mesmo do grupo Admin.', 'Fechar', {\r\n        duration: 5000\r\n      });\r\n      return;\r\n    }\r\n    \r\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\r\n      width: '400px',\r\n      data: { \r\n        group: group,\r\n        isAdminGroup: false,\r\n        message: `Tem certeza que deseja remover ${user.fullName} do grupo ${group.name}?`\r\n      }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.removeUserFromGroup(user.id, group.id);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n","<div class=\"container\" *ngIf=\"!isLoading\">\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>Gerenciamento da Empresa</mat-card-title>\r\n      <mat-card-subtitle>Gerencie informações da empresa, usuários e grupos</mat-card-subtitle>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n      <mat-tab-group [(selectedIndex)]=\"activeTab\">\r\n        <!-- Aba de Informações da Empresa -->\r\n        <mat-tab label=\"Informações da Empresa\">\r\n          <div class=\"tab-content\">\r\n            <form [formGroup]=\"companyForm\" (ngSubmit)=\"saveCompany()\">\r\n              <div class=\"form-row\">\r\n                <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                  <mat-label>Nome da Empresa</mat-label>\r\n                  <input matInput formControlName=\"name\" placeholder=\"Nome da empresa\">\r\n                  <mat-error *ngIf=\"companyForm.get('name')?.hasError('required')\">\r\n                    Nome da empresa é obrigatório\r\n                  </mat-error>\r\n                  <mat-error *ngIf=\"companyForm.get('name')?.hasError('maxlength')\">\r\n                    Nome da empresa deve ter no máximo 100 caracteres\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n\r\n              <div class=\"form-row\">\r\n                <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                  <mat-label>Domínio</mat-label>\r\n                  <input matInput formControlName=\"domain\" placeholder=\"Domínio (ex: empresa.com)\">\r\n                  <mat-hint>Utilizado para verificação de email ao registrar usuários</mat-hint>\r\n                  <mat-error *ngIf=\"companyForm.get('domain')?.hasError('maxlength')\">\r\n                    Domínio deve ter no máximo 50 caracteres\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n\r\n              <div class=\"action-row\">\r\n                <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"companyForm.invalid\">\r\n                  Salvar Alterações\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </mat-tab>\r\n\r\n        <!-- Aba de Gerenciamento de Grupos -->\r\n        <mat-tab label=\"Grupos\">\r\n          <div class=\"tab-content\">\r\n            <!-- Botão para adicionar novo grupo -->\r\n            <div class=\"action-bar\">\r\n              <button mat-raised-button color=\"primary\" (click)=\"openGroupDialog()\">\r\n                <mat-icon>add</mat-icon> Novo Grupo\r\n              </button>\r\n            </div>\r\n\r\n            <div class=\"group-cards\">\r\n              <mat-card class=\"group-card\" *ngFor=\"let group of groups\">\r\n                <mat-card-header>\r\n                  <mat-card-title>{{ group.name }}</mat-card-title>\r\n                  <mat-card-subtitle *ngIf=\"group.description\">{{ group.description }}</mat-card-subtitle>\r\n                  \r\n                  <!-- Botões de editar e excluir -->\r\n                  <div class=\"card-actions\">\r\n                    <button mat-icon-button color=\"primary\" \r\n                            (click)=\"openGroupDialog(group)\" \r\n                            [disabled]=\"group.name.toLowerCase() === 'admin'\"\r\n                            [matTooltip]=\"group.name.toLowerCase() === 'admin' ? 'Não é permitido editar o grupo Admin' : 'Editar grupo'\">\r\n                      <mat-icon>edit</mat-icon>\r\n                    </button>\r\n                    <button mat-icon-button color=\"warn\" \r\n                            (click)=\"confirmDeleteGroup(group)\" \r\n                            [disabled]=\"group.name.toLowerCase() === 'admin'\"\r\n                            [matTooltip]=\"group.name.toLowerCase() === 'admin' ? 'Não é permitido excluir o grupo Admin' : 'Excluir grupo'\">\r\n                      <mat-icon>delete</mat-icon>\r\n                    </button>\r\n                  </div>\r\n                </mat-card-header>\r\n                \r\n                <mat-card-content>\r\n                  <h3>Usuários no Grupo</h3>\r\n                  <mat-list>\r\n                    <mat-list-item *ngFor=\"let user of group.users\">\r\n                      <div class=\"user-list-item\">\r\n                        <span>{{ user.fullName }}</span>\r\n                        <button mat-icon-button color=\"warn\" (click)=\"confirmRemoveUserFromGroup(user, group)\" \r\n                                matTooltip=\"Remover do grupo\" \r\n                                [disabled]=\"isAdminUserInAdminGroup(user.id, group.id)\"\r\n                                [matTooltipDisabled]=\"!isAdminUserInAdminGroup(user.id, group.id)\"\r\n                                [matTooltip]=\"isAdminUserInAdminGroup(user.id, group.id) ? 'Não é possível remover a si mesmo do grupo Admin' : 'Remover do grupo'\">\r\n                          <mat-icon>delete</mat-icon>\r\n                        </button>\r\n                      </div>\r\n                    </mat-list-item>\r\n                    \r\n                    <mat-list-item *ngIf=\"!group.users || group.users.length === 0\">\r\n                      <i>Nenhum usuário neste grupo</i>\r\n                    </mat-list-item>\r\n                  </mat-list>\r\n                </mat-card-content>\r\n                \r\n                <mat-card-actions>\r\n                  <button mat-button color=\"primary\" (click)=\"openAddUserDialog(group)\">\r\n                    <mat-icon>person_add</mat-icon> Adicionar Usuário\r\n                  </button>\r\n                </mat-card-actions>\r\n              </mat-card>\r\n            </div>\r\n          </div>\r\n        </mat-tab>\r\n\r\n        <!-- Aba de Gerenciamento de Usuários -->\r\n        <mat-tab label=\"Usuários\">\r\n          <div class=\"tab-content\">\r\n            <table mat-table [dataSource]=\"users\" class=\"mat-elevation-z8 full-width\">\r\n              <!-- ID Column -->\r\n              <ng-container matColumnDef=\"id\">\r\n                <th mat-header-cell *matHeaderCellDef>ID</th>\r\n                <td mat-cell *matCellDef=\"let user\">{{ user.id }}</td>\r\n              </ng-container>\r\n\r\n              <!-- Nome Column -->\r\n              <ng-container matColumnDef=\"fullName\">\r\n                <th mat-header-cell *matHeaderCellDef>Nome</th>\r\n                <td mat-cell *matCellDef=\"let user\">{{ user.fullName }}</td>\r\n              </ng-container>\r\n\r\n              <!-- Email Column -->\r\n              <ng-container matColumnDef=\"email\">\r\n                <th mat-header-cell *matHeaderCellDef>Email</th>\r\n                <td mat-cell *matCellDef=\"let user\">{{ user.email }}</td>\r\n              </ng-container>\r\n\r\n              <!-- Grupos Column -->\r\n              <ng-container matColumnDef=\"groups\">\r\n                <th mat-header-cell *matHeaderCellDef>Grupos</th>\r\n                <td mat-cell *matCellDef=\"let user\">\r\n                  <span *ngIf=\"user.groups && user.groups.length > 0\">\r\n                    <ng-container *ngFor=\"let g of user.groups; let last = last\">\r\n                      {{ g.name }}<span *ngIf=\"!last\">, </span>\r\n                    </ng-container>\r\n                  </span>\r\n                  <span *ngIf=\"!user.groups || user.groups.length === 0\">\r\n                    <i>Nenhum grupo</i>\r\n                  </span>\r\n                </td>\r\n              </ng-container>\r\n\r\n              <tr mat-header-row *matHeaderRowDef=\"['id', 'fullName', 'email', 'groups']\"></tr>\r\n              <tr mat-row *matRowDef=\"let row; columns: ['id', 'fullName', 'email', 'groups'];\"></tr>\r\n            </table>\r\n          </div>\r\n        </mat-tab>\r\n      </mat-tab-group>\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>\r\n\r\n<div class=\"loading-container\" *ngIf=\"isLoading\">\r\n  <mat-spinner diameter=\"50\"></mat-spinner>\r\n  <p>Carregando...</p>\r\n</div>","import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { User } from 'shared-lib';\r\nimport { AuthService } from 'shared-lib';\r\nimport { UserService } from 'shared-lib';\r\n\r\n@Component({\r\n  selector: 'app-company-register',\r\n  standalone: false,\r\n  templateUrl: './company-register.component.html',\r\n  styleUrls: ['./company-register.component.scss']\r\n})\r\nexport class CompanyRegisterComponent {\r\n  registerForm: FormGroup;\r\n\r\n  constructor(\r\n    private readonly fb: FormBuilder,\r\n    private readonly userService: UserService,\r\n    private readonly router: Router,\r\n    private readonly authService: AuthService\r\n  ) {\r\n    this.registerForm = this.fb.group({\r\n      fullName: this.fb.control('', [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(15),\r\n        /* Validators.pattern(/^\\w+$/) */\r\n      ]),\r\n      passwordHash: this.fb.control('', [\r\n        Validators.required,\r\n        Validators.minLength(8),\r\n        Validators.maxLength(30),\r\n        /* Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/) */\r\n      ]),\r\n      email: this.fb.control('', [\r\n        Validators.required,\r\n        Validators.maxLength(30)\r\n      ])\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.registerForm.invalid) {\r\n      this.registerForm.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n    this.userService.register(this.registerForm.value as User, true).subscribe(\r\n      (res: { token: string }) => {\r\n        this.authService.authenticate(res.token);\r\n        this.router.navigate(['/Dashboard']);\r\n      }\r\n    )\r\n  }\r\n\r\n  getUsernameError(): string | null {\r\n    const control = this.registerForm.get('fullName');\r\n    if (control?.hasError('required')) return 'Nome de usuário é obrigatório';\r\n    if (control?.hasError('minlength')) return 'Mínimo 3 caracteres';\r\n    if (control?.hasError('maxlength')) return 'Máximo de 15 caracteres';\r\n    return null;\r\n  }\r\n\r\n  getPasswordError(): string | null {\r\n    const control = this.registerForm.get('passwordHash');\r\n    if (control?.hasError('required')) return 'Senha é obrigatória';\r\n    if (control?.hasError('minlength')) return 'Mínimo 8 caracteres';\r\n    if (control?.hasError('maxlength')) return 'Máximo de 30 caracteres';\r\n    return null;\r\n  }\r\n\r\n  onGoogleLogin() {\r\n    this.authService.getFirebaseToken().then(token => {\r\n      if (token) {\r\n        this.userService.loginGoogle(token).subscribe((res) => {\r\n          this.authService.authenticate(res.token);\r\n          this.router.navigate(['/']);\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n","<div class=\"register\">\r\n    <div class=\"register-container\">\r\n        <div class=\"register-left\">\r\n            <div class=\"register-header\">\r\n                <span class=\"fs-2 fw-medium\">Cadastrar Empresa</span>\r\n                <h3 class=\"fs-6\" style=\"color: rgb(140, 140, 140);\">Preencha suas informações para criar uma conta</h3>\r\n            </div>\r\n            <form class=\"register-form\" (ngSubmit)=\"onSubmit()\" [formGroup]=\"registerForm\">\r\n                <mat-form-field>\r\n                    <mat-label>Nome de usuário</mat-label>\r\n                    <input type=\"text\" matInput formControlName=\"fullName\">\r\n                    <mat-error *ngIf=\"getUsernameError()\">{{ getUsernameError() }}</mat-error>\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <mat-label>Email</mat-label>\r\n                    <input type=\"email\" matInput formControlName=\"email\">\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <mat-label>Senha</mat-label>\r\n                    <input type=\"password\" matInput formControlName=\"passwordHash\" placeholder=\"Ex. pat@example.com\">\r\n                    <mat-error *ngIf=\"getPasswordError()\">{{ getPasswordError() }}</mat-error>\r\n                </mat-form-field>\r\n                <mat-checkbox>Li e concordo com os termos e condições</mat-checkbox>\r\n                <button type=\"submit\" mat-stroked-button style=\"background-color: var(--primary-color); color: white;\">Criar conta</button>\r\n            </form>\r\n        </div>\r\n        <div class=\"register-image\">\r\n            <img src=\"assets/images/studying.jpg\" alt=\"Register Image\">\r\n\r\n        </div>\r\n    </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n// Angular Material Imports\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\n\r\n// Components (will be created)\r\nimport { CompanyManagementComponent } from './components/company-management/company-management.component';\r\nimport { AddUserDialogComponent } from './components/company-management/add-user-dialog/add-user-dialog.component';\r\nimport { GroupDialogComponent } from './components/company-management/group-dialog/group-dialog.component';\r\nimport { ConfirmDialogComponent } from './components/company-management/confirm-dialog/confirm-dialog.component';\r\nimport { CompanyRegisterComponent } from './components/company-register/company-register.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'management', component: CompanyManagementComponent },\r\n  { path: 'register', component: CompanyRegisterComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CompanyManagementComponent,\r\n    AddUserDialogComponent,\r\n    GroupDialogComponent,\r\n    ConfirmDialogComponent,\r\n    CompanyRegisterComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    RouterModule.forChild(routes),\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatSelectModule,\r\n    MatTabsModule,\r\n    MatChipsModule,\r\n    MatProgressSpinnerModule,\r\n    MatTooltipModule,\r\n    MatListModule,\r\n    MatCheckboxModule\r\n  ]\r\n})\r\nexport class CompanyModule { }\r\n","/*\r\n * Public API Surface of mfe-company\r\n */\r\n\r\nexport * from './lib/company.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i3","i4","i1","i5","i6","i2","i7","i10","i8"],"mappings":"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"}