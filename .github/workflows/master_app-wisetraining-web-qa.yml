name: Build and Deploy WiseTraining API

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore WISETRAINING.API.sln
      
    - name: Build
      run: dotnet build WISETRAINING.API.sln --no-restore --configuration Release
      
    - name: Test
      run: dotnet test WISETRAINING.API.sln --no-build --verbosity normal --configuration Release
      
    - name: Publish
      run: dotnet publish WISETRAINING.API/WISETRAINING.API.csproj -c Release -o publish
      
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: api-build
        path: publish/**

  deploy:
    runs-on: windows-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: 'Production'
      
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: api-build
        path: publish
        
    # Deployment steps depend on your hosting environment. Below are placeholders
    # for common deployment scenarios. You'll need to customize this section.
    
    # Example for Azure App Service deployment
    - name: Deploy to Azure Web App
      id: deploy-to-azure
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'WiseTrainingAPI' # Replace with your Azure App Service name
        slot-name: 'production'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} # You'll need to add this secret in GitHub
        package: publish
    
    # Alternatively, for other hosting environments, you might use SSH or FTP
    
    # - name: Set up SSH
    #   uses: webfactory/ssh-agent@v0.5.4
    #   with:
    #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    #
    # - name: Deploy via SSH
    #   run: |
    #     scp -r publish/* user@your-server:/path/to/deployment/
